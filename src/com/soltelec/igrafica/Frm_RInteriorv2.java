/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_RInteriorv2 extends javax.swing.JDialog {

    private int defecto = 0;
    private int contadorA = 0;
    private int contadorB = 0;
    final int alta = 100;
    final int baja = 1;
    private String cadena = "";
    private String cadenaRInterior = "";
    private String grupo = "";
    private boolean aprobado = true;
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    //DIRECCIÓN IP DEL SERVIDOR = 186.112.176.34
    //---

    /**
     * Creates new form Frm_RInteriorv2
     */
    public Frm_RInteriorv2(java.awt.Frame parent, boolean modal, int idVehiculo,
            int hojaPruebasActual, int idPrueba) {
        super(parent, modal);
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }

    public Frm_RInteriorv2() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        btn_guardar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Revisión interior");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jCheckBox1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox1.setText("Asientos mal anclados o con riesgo de desprendimiento");

        jCheckBox2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox2.setText("El número de sillas excede con lo estipulado en la licencia de transito");

        jCheckBox3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox3.setText("<html>Elementos deteriorados, sueltos o con riesgo de desprendimiento que pueden ocasionar lesiones a los ocupantes del vehículo. (Asideros, manijas, y portaequipajes).</html>");

        jCheckBox4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox4.setText("<html>La existencia en el interior del habitaculo o cabina de partes puntiagudas o con aristas que puedan lesionar a los <br/>ocupantes del vehículo</html>");

        jCheckBox5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox5.setText("<html>Estado deficiente de las sillas o tapicería (Rota, cortada, descocidos) en vehículos de servicio público o especial de pasajeros</html>");

        jCheckBox6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox6.setText("<html>Sillas, carteras y tapizados en mal estado (Rota, cortada, descocidos) en vehículos de servicio particular</html>");

        jCheckBox7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox7.setText("Estado o funcionamiento deficiente de las chapas y seguros");

        jCheckBox8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox8.setText("<html> Estado o funcionamiento deficiente del sistema de cierre y apertura de puertas(s) de servicio accionado por el conductor cuando aplique </html>");
        jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox8ActionPerformed(evt);
            }
        });

        jCheckBox9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox9.setText("<html>La inexistencia, mala sujeción o el mal funcionamiento de los timbres o <br/>dispositivos similares, en veículos de servicio público de transporte colectivo de pasajeros<html>");
        jCheckBox9.setActionCommand("<html>Estado o funcionamiento deficiente del sistema de cierre y apertura de puertas(s) de servicio accionado por el conductor<br/> cuando aplique<html>");

        jCheckBox11.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox11.setText("Tubos de escape en el habitáculo o cabina de los pasajeros o conductor.");

        jCheckBox12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox12.setText("Batería ubicada en el habitáculo de pasajeros o del conductor");

        jCheckBox10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox10.setText("<html>Agujeros, cortes o perforaciones visibles en el habitáculo o cabina que<br/>permitan la entrada de gases o agua, o que representen peligro para los <br/> ocupantes del vehículo</html>");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 1415, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(824, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox11)
                .addGap(83, 83, 83))
        );

        jScrollPane1.setViewportView(jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Habitáculo del conductor y pasajeros", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/spanner_24.png")), jPanel2); // NOI18N

        jCheckBox13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox13.setText("<html>Inexistencia o mal funcionamiento del cinturón (anclajes dañados, cierre del broche<br/> no funcional, sujeción deficiente y/o deterioro evidente en el área de la correa)</html>");

        jCheckBox14.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox14.setText("<html>Anclajes o sistemas de broche con materiales diferentes a metálicos (no debe <br/>haber sistema de cierre plástico o con hebilla plástica).</html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(254, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cinturones de seguridad y sus anclajes", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/link_24.png")), jPanel1); // NOI18N

        jCheckBox15.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox15.setText("<html>La inexistencia de los elementos de control de velocidad y tipos de alarma reglamentados de acuerdo con la modalidad del<br> servicio  para los vehículos de transporte público de pasajeros por carretera, vehículos de servicio público especial<br> (turismo, empresarial y escolar)</html>");

        jCheckBox16.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox16.setText("<html>La no ubicación de la alarma o dispositivo sonoro en la parte delantera del vehículo, dentro del área dispuesta para los<br> pasajeros y no audible para el conductor del vehículo</html>");

        jCheckBox17.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox17.setText("<html>La no ubicación de la pantalla digital en la parte superior delantera del vehículo, dentro del área dispuesta para<br> los pasajeros</html>");

        jCheckBox18.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox18.setText("<html>El mal funcionamiento del sistema de chequeo que no permita verificar el dispositivo sonoro y la pantalla digital, al ser<br> activado en estado de reposo, de acuerdo con el tipo de alarma correspondiente</html>");

        jCheckBox19.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox19.setText("<html>La inexistencia de la calcomanía reglamentada para informar sobre la existencia del dispositivo de control de velocidad a los<br> usuarios de los vehículos de transporte público de pasajeros por carretera, de servicio público especial,<br> (turismo, empresarial escolar)</html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dispositivos de control de velocidad", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/speedometer.png")), jPanel3); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>REVISION<br/> INTERIOR</center></html>");

        btn_guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        btn_guardar.setText("Guardar");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        btn_cancelar.setText("cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardar)
                    .addComponent(btn_cancelar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        //ReceptorServer rs = new ReceptorServer();
        establecerGrupo("Revisión Interior");
        boolean persistir = false;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
        if (jCheckBox1.isSelected()) {            
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10026);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox2.isSelected()) {           
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10027);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox3.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10028);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox4.isSelected()) {            
            try {              
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10029);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox5.isSelected()) {           
            try {                
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10030);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {
            try {               
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10031);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox7.isSelected()) {            
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10032);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox8.isSelected()) {
            try {               
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10033);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox9.isSelected()) {
            try {               
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10034);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox10.isSelected()) {
            try {               
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10035);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox11.isSelected()) {
            try {
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10036);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox12.isSelected()) {

            try {             
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10037);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox13.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10038);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox14.isSelected()) {            
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10058);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox15.isSelected()) {            
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10121);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox16.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10122);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox17.isSelected()) {            
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10123);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox18.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10124);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox19.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10125);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        establecerAprobado(defecto);
        cadenaRInterior = obtenerNombreProblema();
        aprobado = obtenberAprobado();
        establecerCantidadProblemas(contadorA, contadorB);
        if (persistir == true) {
            try {
                  conexion.setAutoCommit(false);
                conexion.commit();              
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos de la Revision Interior de una Manera Exitosa ");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        doClose(0);
        nrei.establecer_oprimido(true);
    }//GEN-LAST:event_btn_guardarActionPerformed

        private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
            doClose(0);
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaRInterior) {
        this.cadenaRInterior += cadenaRInterior + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaRInterior;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }
    /////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /*
//         * Set the Nimbus look and feel
//         */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /*
//         * If Nimbus (introduced in Java SE 6) is not available, stay with the
//         * default look and feel. For details see
//         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Frm_RInteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Frm_RInteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Frm_RInteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Frm_RInteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /*
//         * Create and display the dialog
//         */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                Frm_RInteriorv2 dialog = new Frm_RInteriorv2(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_guardar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
