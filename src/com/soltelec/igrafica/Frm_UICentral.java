
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.soltelec.dao.UsuariosJpaController;
import com.soltelec.eventos.igrafica.Evento_Datos;
import com.soltelec.loginadministrador.LoginServiceAuditoria;
import com.soltelec.loginadministrador.LoginServiceCDA;
import com.soltelec.loginadministrador.UtilLogin;
import com.soltelec.model.Usuarios;
import com.soltelec.modulopuc.configuracion.vista.DialogPropiedades;
import com.soltelec.modulopuc.utilidades.Mensajes;
import com.soltelec.util.MonitoreoOpacimetro;
import com.soltelec.util.UtilInfoOpacidad;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import javax.persistence.EntityManager;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.JXLoginPane;
import org.jdesktop.swingx.JXLoginPane.Status;
import org.soltelec.models.controllers.CalibracionController;
import org.soltelec.models.controllers.CalibracionDosPuntosController;
import org.soltelec.models.controllers.EquipoController;
import org.soltelec.models.entities.Calibracion;
import org.soltelec.models.entities.Equipo;
import org.soltelec.principal.PanelBotonesPrincipal;
import org.soltelec.procesosbanco.BancoGasolina;
import org.soltelec.procesosbanco.PanelProgreso;
import org.soltelec.procesosbanco.PanelServicioBanco;
import org.soltelec.procesosbanco.WorkerFugas;
import org.soltelec.procesosbanco.verificacion.PanelProcesoVerificacion;
import org.soltelec.util.UtilFugas;
import org.soltelec.util.UtilInfoServicioGases;
import termohigrometro.MedicionTermoHigrometro;
import termohigrometro.TermoHigrometro;
import termohigrometro.TermoHigrometroArtisan;
import termohigrometro.TermoHigrometroPCSensors;
import utiltermohigrometro.UtilPropiedades;
import vistas.DlgCalibracion;
import vistas.DlgServicio;
import eu.hansolo.steelseries.gauges.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import static org.jboss.resteasy.test.EmbeddedContainer.start;
import org.soltelec.procesosbanco.PanelCero;
import org.soltelec.procesosopacimetro.JDialogServicioOpacimetro;

/**
 *
 * @author Usuario - GerenciaDesarrollo
 */
public class Frm_UICentral extends javax.swing.JDialog {

    EquipoController controller = new EquipoController();
    Equipo equipo = new Equipo();
    String nombreCDA = "";
    String TempOpaci="";
    String resolucion = "";
    String version = "SART Version:1.7.3 copyright  2009 ";
    String nombreUsuario = "";
    int consecutivoPruebasGasolina, consecutivoPruebasDiesel;
    String pef, serialBanco, marcaBanco;
    String fechaAjuste, fechaFugas, fechaVerificacion;
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MMMMM-yyy HH:mm:ss");
    TermoHigrometro termoHigrometro;
    TermoHigrometroArtisan termoHigrometroArtisan;
    double humedad;
    double temperaturaAmbiente;
    private Timer timerTermoHigrometro;
    protected static EntityManager em;

    /**
     * Creates new form Frm_UICentral
     *
     * @param parent
     * @param modal
     */
    public Frm_UICentral(java.awt.Frame parent, boolean modal, EntityManager eManager) {
        super(parent, modal);
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();       
        setSize(d);
        setResizable(false);
         parent.setLocationRelativeTo(null);
         this.setLocationRelativeTo(null);
        em = eManager;
        iniciarHiloFecha(); 
        inciarHiloHumedadTemperatura();
       // lblInfoGasolina.setText(InciarInfoGasolina());
        

        
        //System.out.println("Voy a comenzar el monitoreo del Opacimetro");
        //Verificacion del Cero del opacimetro
        beginMonitoreoOpacimetro();
        btnVerificacion.setEnabled(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        lab_taxi = new javax.swing.JLabel();
        lab_fotos = new javax.swing.JLabel();
        lab_gases = new javax.swing.JLabel();
        lab_frenos = new javax.swing.JLabel();
        lab_inspeccionVisual = new javax.swing.JLabel();
        lab_desviacion = new javax.swing.JLabel();
        lab_ruido = new javax.swing.JLabel();
        lab_luces = new javax.swing.JLabel();
        lab_suspencion = new javax.swing.JLabel();
        lab_finalizar = new javax.swing.JLabel();
        lab_integracion = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labl_descripcion = new javax.swing.JLabel();
        labelFecha = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnServicioFrenos = new javax.swing.JButton();
        btnServicioGases = new javax.swing.JButton();
        btnCalibracion = new javax.swing.JButton();
        btnVerificacion = new javax.swing.JButton();
        btnFugas = new javax.swing.JButton();
        btnAuditoria = new javax.swing.JButton();
        btnInfoOpacidad = new javax.swing.JButton();
        btnInfoGasolina = new javax.swing.JButton();
        btnConfiguracion = new javax.swing.JButton();
        lab_labrado = new javax.swing.JLabel();
        displayMultiTemp = new eu.hansolo.steelseries.gauges.DisplaySingle();
        displayMultiHumedad = new eu.hansolo.steelseries.gauges.DisplaySingle();
        lblInfoGasolina = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lab_taxi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxi.png"))); // NOI18N
        lab_taxi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_taxiMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_taxiMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_taxiMouseExited(evt);
            }
        });

        lab_fotos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/camara.png"))); // NOI18N
        lab_fotos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_fotosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_fotosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_fotosMouseExited(evt);
            }
        });

        lab_gases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisionesCambio.png"))); // NOI18N
        lab_gases.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_gasesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_gasesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_gasesMouseExited(evt);
            }
        });

        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rueda.png"))); // NOI18N
        lab_frenos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_frenosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_frenosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_frenosMouseExited(evt);
            }
        });

        lab_inspeccionVisual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ojo.png"))); // NOI18N
        lab_inspeccionVisual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_inspeccionVisualMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_inspeccionVisualMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_inspeccionVisualMouseExited(evt);
            }
        });

        lab_desviacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/desviacion.png"))); // NOI18N
        lab_desviacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_desviacionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_desviacionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_desviacionMouseExited(evt);
            }
        });

        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocina.png"))); // NOI18N
        lab_ruido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseExited(evt);
            }
        });

        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/foco.png"))); // NOI18N
        lab_luces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_lucesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_lucesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_lucesMouseExited(evt);
            }
        });

        lab_suspencion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguador.png"))); // NOI18N
        lab_suspencion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_suspencionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_suspencionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_suspencionMouseExited(evt);
            }
        });
        lab_suspencion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lab_suspencionKeyPressed(evt);
            }
        });

        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/fin.png"))); // NOI18N
        lab_finalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseExited(evt);
            }
        });

        lab_integracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/configuracionCambio.png"))); // NOI18N
        lab_integracion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_integracionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_integracionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_integracionMouseExited(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        labl_descripcion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labl_descripcion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        labelFecha.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setLayout(new java.awt.GridLayout(2, 4, 4, 4));

        btnServicioFrenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/disk_24.png"))); // NOI18N
        btnServicioFrenos.setText("Servicio de frenos");
        btnServicioFrenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServicioFrenosActionPerformed(evt);
            }
        });
        jPanel2.add(btnServicioFrenos);

        btnServicioGases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rss_24.png"))); // NOI18N
        btnServicioGases.setText("Servicio de gases");
        btnServicioGases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnServicioGasesActionPerformed(evt);
            }
        });
        jPanel2.add(btnServicioGases);

        btnCalibracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/spanner_24.png"))); // NOI18N
        btnCalibracion.setText("Calibración");
        btnCalibracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalibracionActionPerformed(evt);
            }
        });
        jPanel2.add(btnCalibracion);

        btnVerificacion.setText("Verificacion");
        btnVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificacionActionPerformed(evt);
            }
        });
        jPanel2.add(btnVerificacion);

        btnFugas.setText("Fugas");
        btnFugas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFugasActionPerformed(evt);
            }
        });
        jPanel2.add(btnFugas);

        btnAuditoria.setText("Auditoria");
        btnAuditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAuditoriaActionPerformed(evt);
            }
        });
        jPanel2.add(btnAuditoria);

        btnInfoOpacidad.setText("Info Opacidad");
        btnInfoOpacidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoOpacidadActionPerformed(evt);
            }
        });
        jPanel2.add(btnInfoOpacidad);

        btnInfoGasolina.setText("Info Gasolina");
        btnInfoGasolina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoGasolinaActionPerformed(evt);
            }
        });
        jPanel2.add(btnInfoGasolina);

        btnConfiguracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/propiedades.png"))); // NOI18N
        btnConfiguracion.setToolTipText("");
        btnConfiguracion.setBorderPainted(false);
        btnConfiguracion.setContentAreaFilled(false);
        btnConfiguracion.setFocusable(false);
        btnConfiguracion.setPreferredSize(new java.awt.Dimension(48, 48));
        btnConfiguracion.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/propiedadesCambio.png"))); // NOI18N
        btnConfiguracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfiguracionActionPerformed(evt);
            }
        });

        lab_labrado.setBackground(new java.awt.Color(204, 204, 204));
        lab_labrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rofundimetro2.png"))); // NOI18N
        lab_labrado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_labradoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_labradoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_labradoMouseExited(evt);
            }
        });

        displayMultiTemp.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        displayMultiTemp.setDigitalFont(true);
        displayMultiTemp.setLcdColor(eu.hansolo.steelseries.tools.LcdColor.BLACK_LCD);
        displayMultiTemp.setLcdDecimals(2);
        displayMultiTemp.setLcdInfoString("Temperatura");
        displayMultiTemp.setLcdUnitString("C º");

        javax.swing.GroupLayout displayMultiTempLayout = new javax.swing.GroupLayout(displayMultiTemp);
        displayMultiTemp.setLayout(displayMultiTempLayout);
        displayMultiTempLayout.setHorizontalGroup(
            displayMultiTempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 152, Short.MAX_VALUE)
        );
        displayMultiTempLayout.setVerticalGroup(
            displayMultiTempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 59, Short.MAX_VALUE)
        );

        displayMultiHumedad.setBackground(new java.awt.Color(102, 102, 102));
        displayMultiHumedad.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        displayMultiHumedad.setForeground(new java.awt.Color(255, 255, 255));
        displayMultiHumedad.setToolTipText("");
        displayMultiHumedad.setDigitalFont(true);
        displayMultiHumedad.setDoubleBuffered(true);
        displayMultiHumedad.setGlowColor(new java.awt.Color(255, 255, 255));
        displayMultiHumedad.setGlowVisible(true);
        displayMultiHumedad.setGlowing(true);
        displayMultiHumedad.setLcdColor(eu.hansolo.steelseries.tools.LcdColor.BLACK_LCD);
        displayMultiHumedad.setLcdDecimals(2);
        displayMultiHumedad.setLcdInfoString("Humedad Relativa");
        displayMultiHumedad.setLcdUnitString("%");

        javax.swing.GroupLayout displayMultiHumedadLayout = new javax.swing.GroupLayout(displayMultiHumedad);
        displayMultiHumedad.setLayout(displayMultiHumedadLayout);
        displayMultiHumedadLayout.setHorizontalGroup(
            displayMultiHumedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayMultiHumedadLayout.setVerticalGroup(
            displayMultiHumedadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );

        lblInfoGasolina.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblInfoGasolina.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblInfoGasolina, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfiguracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labl_descripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 104, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_ruido)
                    .addComponent(lab_fotos))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lab_suspencion)
                        .addGap(18, 18, 18)
                        .addComponent(lab_integracion)
                        .addGap(18, 18, 18)
                        .addComponent(lab_taxi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lab_finalizar)
                        .addGap(11, 11, 11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lab_luces)
                        .addGap(18, 18, 18)
                        .addComponent(lab_frenos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lab_labrado)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lab_inspeccionVisual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_gases)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lab_desviacion)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(displayMultiTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(displayMultiHumedad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(displayMultiTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(displayMultiHumedad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(lab_inspeccionVisual)
                        .addComponent(lab_desviacion)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_frenos)
                    .addComponent(lab_luces)
                    .addComponent(lab_ruido)
                    .addComponent(lab_gases)
                    .addComponent(lab_labrado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_fotos)
                    .addComponent(lab_suspencion)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lab_taxi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lab_integracion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lab_finalizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labl_descripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblInfoGasolina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConfiguracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInfoGasolinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoGasolinaActionPerformed
        //String infoAnalizador = "";
        Equipo equipo = new Equipo();
        try {
            serialBanco = UtilFugas.obtenerSerialBanco();
            equipo = controller.findEquipoBySerial(serialBanco.toString());
            Calibracion calibracion = new CalibracionController().findCalibracionGasolina(equipo.getIdEquipo());
            Calibracion c = new CalibracionController().findCalibraciontipotres(equipo.getIdEquipo());

            if (serialBanco != null) {
                //infoAnalizador = UtilPropiedades.cargarPropiedad(serialBanco, "propiedades.properties");

                fechaFugas = sdf.format(calibracion.getFecha());
                fechaAjuste = sdf.format(c.getFecha());
                consecutivoPruebasGasolina = UtilInfoServicioGases.obtenerConsecutivoGases();
            } else {
                serialBanco = " --";
                pef = "--";
                marcaBanco = "--";
                fechaFugas = "--";
                fechaVerificacion = "--";
                consecutivoPruebasGasolina = 0;
            }

            //            if (infoAnalizador == null) {
                //                infoAnalizador = "Falta la propiedad de configuracion";
                //            }
        } catch (Exception exc) {
            Mensajes.mostrarExcepcion(exc);
        }

        StringBuilder sb = new StringBuilder();
        sb.append("Serial del Banco: ").append(equipo.getSerialresolucion()).append("\n");
        sb.append("PEF: ").append("0." + equipo.getPef()).append("\n");
        sb.append("Marca: ").append(equipo.getMarca()).append("\n");
        sb.append("Fecha de Fugas: ").append(fechaAjuste).append("\n");
        sb.append("Fecha de Verificacion: ").append(fechaFugas).append("\n");
        sb.append("Damab: ").append(equipo.getResolucionambiental()).append("\n");
        // sb.append("Consecutivo de Pruebas Gasolina: ").append(consecutivoPruebasGasolina);

        JOptionPane.showMessageDialog(null, sb.toString());
    }//GEN-LAST:event_btnInfoGasolinaActionPerformed

    private void btnInfoOpacidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoOpacidadActionPerformed
        Connection cn = null;
        String infoVerificacion = "";
        String infoPruebas = "";
        String marca = "";
        String strSerial = "";

        try {
            
            UtilInfoOpacidad utilInfoOpacidad = new UtilInfoOpacidad();
            Long serialOpacimetro = UtilFugas.obtenerSerialOpacimetro();
            equipo = controller.findEquipoBySerial(serialOpacimetro.toString());
            Calibracion calibracion = new CalibracionController().findLinealidadgas(equipo.getIdEquipo());
            fechaVerificacion = sdf.format(calibracion.getFecha());
            infoVerificacion = "Ultima fecha de verificacion: " + fechaVerificacion;
            infoPruebas = utilInfoOpacidad.obtenerInfoPruebas(equipo.getSerialresolucion());
            System.out.println("verifico la fecha de la contraseña ");

            equipo.setMarca(controller.findMarcaBySerial(equipo.getSerial()));
        } catch (SQLException | ClassNotFoundException | IOException e) {
            Mensajes.mostrarExcepcion(e);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(Frm_UICentral.class.getName()).log(Level.SEVERE, null, ex);
        }

        long serial;

        try {

            //            serial = Calibracion. obtenerSerial();
            //            marca = UtilLinealidad.obtenerMarcaOpacimetro();
            //            strSerial = String.valueOf(serial);
        } catch (Exception e) {
            Mensajes.mostrarExcepcion(e);
        }

        StringBuilder sb = new StringBuilder();

        //        try {
            //            serialBanco = UtilFugas.obtenerSerialBanco();
            //            strSerial = controller.findEquipoBySerial(serialBanco).toString();
            //        } catch (Exception ex) {
            //            java.util.logging.Logger.getLogger(Frm_UICentral.class.getName()).log(Level.SEVERE, null, ex);
            //        }
        sb.append(infoVerificacion).append("\n").append("Serial: ").append(equipo.getSerialresolucion()).append("\n");
        sb.append("Marca: ").append(equipo.getMarca()).append("\n");
        sb.append(infoPruebas).append("\n");

        Mensajes.mensajeCorrecto(sb.toString());
    }//GEN-LAST:event_btnInfoOpacidadActionPerformed

    private void btnAuditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAuditoriaActionPerformed

        JXLoginPane pane = new JXLoginPane(new LoginServiceAuditoria());
        pane.setLocale(new Locale("ES"));
        pane.setBannerText("ADMINISTRADOR");
        pane.setErrorMessage("Usuario o contrasenia incorrecta,\n o el usuario no es administrador");
        Status status = JXLoginPane.showLoginDialog(null, pane);

        if (status == Status.SUCCEEDED) {
            //Verificar que el nombre de Usuario sea auditoria
            iniciarProgramaAuditoria();
        }
    }//GEN-LAST:event_btnAuditoriaActionPerformed

    private void btnFugasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFugasActionPerformed

        JXLoginPane pane = new JXLoginPane(new LoginServiceCDA(false));
        pane.setLocale(new Locale("ES"));
        pane.setBannerText("USUARIO");
        pane.setErrorMessage("Usuario o contrasenia incorrecta,\n o el usuario no es administrador");
        //loginDialog.setVisible(true);
        JXLoginPane.Status status = JXLoginPane.showLoginDialog(null, pane);

        if (status == JXLoginPane.Status.SUCCEEDED) {
            try {
                UsuariosJpaController ujc = new UsuariosJpaController();
                Usuarios usuario = ujc.getUsuarioByNick(pane.getUserName());
                int idUsuario = usuario.getGeuser();

                pane.getUserName();
                BancoGasolina banco = UtilFugas.obtenerBancoConectado();
                final PanelProgreso panelProgreso = new PanelProgreso();

                JDialog dlg = new JDialog(this);
                dlg.setModal(true);
                dlg.setSize(dlg.getToolkit().getScreenSize());
                dlg.add(panelProgreso);
                dlg.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                dlg.setResizable(false);

                WorkerFugas workerFugas = new WorkerFugas(panelProgreso.getLabelMensaje(), banco, dlg, idUsuario);
                //SwingUtilities.invokeLater(procesoFugas);
                workerFugas.addPropertyChangeListener(new PropertyChangeListener() {

                    public void propertyChange(PropertyChangeEvent evt1) {
                        if (evt1.getPropertyName().equals("progress")) {
                            panelProgreso.getBarraTiempo().setValue((Integer) evt1.getNewValue());
                        }
                    }
                });
                workerFugas.execute();
                dlg.setVisible(true);
                while (!workerFugas.isDone()) {
                }
                banco.getPuertoSerial().close();
            } //end of login correcto
            catch (Exception ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }//end of login correcto
    }//GEN-LAST:event_btnFugasActionPerformed

    private void btnVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificacionActionPerformed
        JXLoginPane pane = new JXLoginPane(new LoginServiceCDA(false));
        pane.setLocale(new Locale("ES"));
        pane.setBannerText("USUARIO");
        pane.setErrorMessage("Usuario o contrasenia incorrecta");
        //loginDialog.setVisible(true);
        JXLoginPane.Status status = JXLoginPane.showLoginDialog(null, pane);

        if (status == JXLoginPane.Status.SUCCEEDED) {
            try {
                UsuariosJpaController ujc = new UsuariosJpaController();
                Usuarios usuario = ujc.getUsuarioByNick(pane.getUserName());
                int idUsuario = usuario.getGeuser();

                pane.getUserName();

                BancoGasolina banco = UtilFugas.obtenerBancoConectado();

                JDialog dlg = new JDialog();
                dlg.setModal(true);
                dlg.setSize(dlg.getToolkit().getScreenSize());
                PanelProcesoVerificacion panelProcesoVerificacion = new PanelProcesoVerificacion(banco);
                panelProcesoVerificacion.setIdUsuario(idUsuario);
                dlg.add(panelProcesoVerificacion);
                dlg.setVisible(true);

                //  banco.getPuertoSerial().close();
            } catch (Exception ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }//end of login correcto
    }//GEN-LAST:event_btnVerificacionActionPerformed

    private void btnServicioFrenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServicioFrenosActionPerformed
        JXLoginPane.Status status = UtilLogin.loginAdminDBCDA();

        if (status == JXLoginPane.Status.SUCCEEDED) {
            DlgServicio serv = new DlgServicio(null, true);
            serv.setVisible(true);
        } else {
        }
    }//GEN-LAST:event_btnServicioFrenosActionPerformed

    private void btnCalibracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalibracionActionPerformed
        JXLoginPane.Status status = UtilLogin.loginAdminDBCDA();

        if (status == JXLoginPane.Status.SUCCEEDED) {
            DlgCalibracion calib = new DlgCalibracion(null, true);
            calib.setVisible(true);
        } else {
        }
    }//GEN-LAST:event_btnCalibracionActionPerformed

    private void btnServicioGasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnServicioGasesActionPerformed

        JXLoginPane.Status status = UtilLogin.loginAdminDBCDA();//muestra el dialogo para el login de la aplicacion, solamente usuario administrador
        if (status == JXLoginPane.Status.SUCCEEDED) {
            iniciarProgramaServicio();
        } else {
            JOptionPane.showMessageDialog(null, "Autenticacion fallida");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnServicioGasesActionPerformed

    private void lab_labradoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_labradoMouseExited
        lab_labrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rofundimetro2.png")));
        labl_descripcion.setText(" ");
    }//GEN-LAST:event_lab_labradoMouseExited

    private void lab_labradoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_labradoMouseEntered
        lab_labrado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/profundimetro.png")));
        labl_descripcion.setText("REG. PROFUNDIDAD DE LABRADO");
    }//GEN-LAST:event_lab_labradoMouseEntered

    private void lab_labradoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_labradoMouseClicked
        if (!equipoBloqueado()) 
        {
            Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
            Frm_Placas dlg = new Frm_Placas(f, true, em);
            dlg.establecerNombreBoton("Labrado");
            dlg.setTitle("Reg. profundidad Labrado");
            dlg.setVisible(true);
           this.remove(dlg);
        } else {
            JOptionPane.showMessageDialog(null, "Equipo bloqueado por autoridad ambiental");
        }
    }//GEN-LAST:event_lab_labradoMouseClicked

    private void btnConfiguracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfiguracionActionPerformed
//        new DialogPropiedades(null).setVisible(true);
       // JOptionPane.showMessageDialog(null,"Opcion No disponible");
        /*      
        this.setAlwaysOnTop(false);
        this.setFocusCycleRoot(false);
        Evento_Datos eventDatos=new Evento_Datos(nombreUsuario);     
        eventDatos.setVisible(true);    
        eventDatos.setFocusable(true);
        eventDatos.validate();
        this.dispose();
        Logger.getLogger("igrafica").info("Usuario: " + nombreUsuario + " abre un evento manual y cierra el programa");*/   
        int opcion = JOptionPane.showConfirmDialog(null,"¿Se agregará un evento manual y el SART se cerrará, esta seguro?","EVENTO MANUAL",JOptionPane.YES_NO_OPTION);

        if(opcion==0){        
            
                Evento_Datos eventDatos=new Evento_Datos(nombreUsuario);  
                eventDatos.setAlwaysOnTop(true);
                eventDatos.setVisible(true);
                Logger.getLogger("igrafica").info("Usuario: " + nombreUsuario + " abre un evento manual y cierra el programa");
                this.dispose();
        
        }else;
        
    }//GEN-LAST:event_btnConfiguracionActionPerformed

    private void lab_integracionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_integracionMouseExited
        lab_integracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/configuracionCambio.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_integracionMouseExited

    private void lab_integracionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_integracionMouseEntered
        lab_integracion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/configuracion.png")));
        labl_descripcion.setText("<html>DESVIACION,<br/> SUSPENSIÓN,<br/> FRENOS</html>");
    }//GEN-LAST:event_lab_integracionMouseEntered

    private void lab_integracionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_integracionMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Integracion");
        dlg.setTitle("Ingreso a Integracion de Prueba");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_integracionMouseClicked

    private void lab_finalizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseExited
        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/fin.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_finalizarMouseExited

    private void lab_finalizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseEntered
        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/finCambia.png")));
        labl_descripcion.setText("SALIR");
    }//GEN-LAST:event_lab_finalizarMouseEntered

    private void lab_finalizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseClicked
        //Solamente puede salir usando usuario y contrasenia de administrador
        JXLoginPane pane = new JXLoginPane(new LoginServiceCDA(false));
        pane.setLocale(new Locale("ES"));
        pane.setBannerText("SALIDA");
        pane.setErrorMessage("Usuario o contrasenia incorrecta,\n o el usuario no es administrador");

        JXLoginPane.Status status = JXLoginPane.showLoginDialog(null, pane);

        if (status == JXLoginPane.Status.SUCCEEDED) {
            try {
                nombreUsuario = pane.getUserName();
                Logger.getLogger("igrafica").info("Usuario: " + nombreUsuario + " cierra el programa");
                

                System.exit(0);
            } catch (Exception ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
    }//GEN-LAST:event_lab_finalizarMouseClicked

    private void lab_suspencionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lab_suspencionKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_lab_suspencionKeyPressed

    private void lab_suspencionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_suspencionMouseExited
        lab_suspencion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguador.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_suspencionMouseExited

    private void lab_suspencionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_suspencionMouseEntered
        lab_suspencion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguadorCambio.png")));
        labl_descripcion.setText("PRUEBA DE SUSPENSIÓN");
    }//GEN-LAST:event_lab_suspencionMouseEntered

    private void lab_suspencionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_suspencionMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Suspensión");
        dlg.setTitle("Ingreso a Suspensión");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_suspencionMouseClicked

    private void lab_lucesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseExited
        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/foco.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_lucesMouseExited

    private void lab_lucesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseEntered
        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/focoCambia.png")));
        labl_descripcion.setText("PRUEBA DE LUCES");
    }//GEN-LAST:event_lab_lucesMouseEntered

    private void lab_lucesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Luces");
        dlg.setTitle("Ingreso a Luxometro");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_lucesMouseClicked

    private void lab_ruidoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseExited
        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocina.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_ruidoMouseExited

    private void lab_ruidoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseEntered
        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocinaCambia.png")));
        labl_descripcion.setText("PRUEBA DE RUIDO");
    }//GEN-LAST:event_lab_ruidoMouseEntered

    private void lab_ruidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Ruido");
        dlg.setTitle("Ingreso a Sonometro");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_ruidoMouseClicked

    private void lab_desviacionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_desviacionMouseExited
        lab_desviacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/desviacion.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_desviacionMouseExited

    private void lab_desviacionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_desviacionMouseEntered
        lab_desviacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/desviacionCambio.png")));
        labl_descripcion.setText("PRUEBA DE DESVIACIÓN");
    }//GEN-LAST:event_lab_desviacionMouseEntered

    private void lab_desviacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_desviacionMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Desviacion");
        dlg.setTitle("Ingreso a Desviacion");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_desviacionMouseClicked

    private void lab_inspeccionVisualMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_inspeccionVisualMouseExited
        lab_inspeccionVisual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ojo.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_inspeccionVisualMouseExited

    private void lab_inspeccionVisualMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_inspeccionVisualMouseEntered
        lab_inspeccionVisual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ojoCambio.png")));
        labl_descripcion.setText("<html>PRUEBA DE <br/> INSPECCIÓN SENSORIAL</html>");
    }//GEN-LAST:event_lab_inspeccionVisualMouseEntered

    private void lab_inspeccionVisualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_inspeccionVisualMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Inspeccion Sensorial");
        dlg.setTitle("Ingreso a Inspeccion Sensorial");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_inspeccionVisualMouseClicked

    private void lab_frenosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseExited
        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rueda.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_frenosMouseExited

    private void lab_frenosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseEntered
        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ruedaCambia.png")));
        labl_descripcion.setText("PRUEBA DE FRENOMETRO");
    }//GEN-LAST:event_lab_frenosMouseEntered

    private void lab_frenosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Frenos");
        dlg.setTitle("Ingreso a Frenometros");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_frenosMouseClicked

    private void lab_gasesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_gasesMouseExited
        lab_gases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisionesCambio.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_gasesMouseExited

    private void lab_gasesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_gasesMouseEntered
        lab_gases.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisiones.png")));
        labl_descripcion.setText("PRUEBA DE GASES");
    }//GEN-LAST:event_lab_gasesMouseEntered

    private void lab_gasesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_gasesMouseClicked

        if (!equipoBloqueado()) {
            Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
            Frm_Placas dlg = new Frm_Placas(f, true, em);
            dlg.establecerNombreBoton("Gases");
            dlg.setTitle("Ingreso a Gases");
            dlg.setVisible(true);
            this.remove(dlg);
            try {
                refrescarInfo();
            } catch (SQLException | ClassNotFoundException | IOException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Equipo bloqueado por autoridad ambiental");
        }
    }//GEN-LAST:event_lab_gasesMouseClicked

    private void lab_fotosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_fotosMouseExited
        lab_fotos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/camara.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_fotosMouseExited

    private void lab_fotosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_fotosMouseEntered
        lab_fotos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/camaraCambio.png")));
        labl_descripcion.setText("REGISTRO DE FOTO");
    }//GEN-LAST:event_lab_fotosMouseEntered

    private void lab_fotosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_fotosMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Foto");
        dlg.setTitle("Ingreso a Foto");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_fotosMouseClicked

    private void lab_taxiMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxiMouseExited
        lab_taxi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxi.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_taxiMouseExited

    private void lab_taxiMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxiMouseEntered
        lab_taxi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxiCambio.png")));
        labl_descripcion.setText("PRUEBA DE TAXIMETRO");
    }//GEN-LAST:event_lab_taxiMouseEntered

    private void lab_taxiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxiMouseClicked
        Frame f = (Frame) (SwingUtilities.getWindowAncestor(this));
        Frm_Placas dlg = new Frm_Placas(f, true, em);
        dlg.establecerNombreBoton("Taximetro");
        dlg.setTitle("Ingreso a Taximetro");
        dlg.setVisible(true);
    }//GEN-LAST:event_lab_taxiMouseClicked

    private void iniciarProgramaServicio() {
        PanelBotonesPrincipal panel = new PanelBotonesPrincipal();
        JDialog dialog = new JDialog(this, true);
        dialog.add(panel);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setSize(this.getToolkit().getScreenSize());
         dialog.setTitle("SART Version:1.7.3 copyright  2009 ");
       dialog.setVisible(true);
       
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Mensajes.mostrarExcepcion(ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_UICentral dialog = new Frm_UICentral(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAuditoria;
    private javax.swing.JButton btnCalibracion;
    private javax.swing.JButton btnConfiguracion;
    private javax.swing.JButton btnFugas;
    private javax.swing.JButton btnInfoGasolina;
    private javax.swing.JButton btnInfoOpacidad;
    private javax.swing.JButton btnServicioFrenos;
    private javax.swing.JButton btnServicioGases;
    private javax.swing.JButton btnVerificacion;
    private eu.hansolo.steelseries.gauges.DisplaySingle displayMultiHumedad;
    private eu.hansolo.steelseries.gauges.DisplaySingle displayMultiTemp;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lab_desviacion;
    private javax.swing.JLabel lab_finalizar;
    private javax.swing.JLabel lab_fotos;
    private javax.swing.JLabel lab_frenos;
    private javax.swing.JLabel lab_gases;
    private javax.swing.JLabel lab_inspeccionVisual;
    private javax.swing.JLabel lab_integracion;
    private javax.swing.JLabel lab_labrado;
    private javax.swing.JLabel lab_luces;
    private javax.swing.JLabel lab_ruido;
    private javax.swing.JLabel lab_suspencion;
    private javax.swing.JLabel lab_taxi;
    private javax.swing.JLabel labelFecha;
    private javax.swing.JLabel labl_descripcion;
    private javax.swing.JLabel lblInfoGasolina;
    // End of variables declaration//GEN-END:variables
   
    
    private void beginMonitoreoOpacimetro() {     
        System.out.println("________________________________________Inicia monitoreo de opacimetro________________________________________ ");  
            try {        
            TempOpaci = UtilPropiedades.cargarPropiedad("TemporizadorOpacimetro", "propiedades.properties");//LEE EL VALOR DE LA VARIABLE TemporizadorOpacimetro
            System.out.println("valor de TempOpaci :" + TempOpaci);
        
            TempOpaci=(TempOpaci==null)?"":TempOpaci;    

        if (TempOpaci.equalsIgnoreCase("") || TempOpaci.equalsIgnoreCase("false") )//LA VARIABLE ESTA VACIA O ESTA CONFIGURADA COMO FALSE
        {
            TempOpaci = "";
            System.out.println("temporizador apagado, la variable TemporizadorOpacimetro esta configurada en false, esta vacia o no existe");
            System.out.println("________________________________________termina monitoreo de opacimetro________________________________________ ");  
        }

        else{//EN CASO DE QUE LA VARIABLE EXISTA Y ESTE CONFIGURADA COMO TRUE
            System.out.println("temporizador encendido, la variable TemporizadorOpacimetro esta configurada en true");
        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);//NUMERO DE PROCESOS QUE SE ESTAN EJECUTANDO, EN ESTE CASO SOLO ES 1 EL DE VALIDAR OPACIMETRO
        MonitoreoOpacimetro monitoreo = new MonitoreoOpacimetro();//CREA EL MONITOREO
        
        ScheduledFuture<?> result = executor.scheduleAtFixedRate(monitoreo, 1, 60, TimeUnit.MINUTES);//EJECUTA EL MONITOREO DEL OPACIMETRO, AL TERMINAR GUARDA EL RESULTADO EN LA VARIABLE RESULT, ScheduledFuture Espera hasta que el thread termine y devuelve el resultado      
        System.out.println("________________________________________termina monitoreo de opacimetro________________________________________ ");  
        }
            }
            catch(IOException ex) 
            {
                System.out.println("error al leer el archivo de configuracion para inicializar el temporizador del opacimetro " + ex);
               JOptionPane.showMessageDialog(null, "Error al leer el archivo propiedades.properties", "ERROR DE LECTURA", JOptionPane.WARNING_MESSAGE);
            }
         
    }
        
    private void iniciarHiloFecha() {

        Thread t = new Thread(new Runnable() {
            public void run() {
                try {
                    nombreCDA = UtilInfoServicioGases.obtenerNombreCDA(em);
                    resolucion = UtilInfoServicioGases.obtenerResolucion(em);
                } catch (SQLException | ClassNotFoundException exc) {
                    Mensajes.mostrarExcepcion(exc);
                    Logger.getRootLogger().info("Excepcion obteniendo info de CDA y gases");
                }
            }
        });
        t.start();
        Timer timer = new Timer(1000, new ActionListener() {
            long contador = 0;
            boolean noRepetir = false;
            SimpleDateFormat sf = new SimpleDateFormat("dd-MMMMM-yyy hh:mm:ss");

            @Override
            public void actionPerformed(ActionEvent e) {
                contador++;
                if (contador % 5 == 0) {
                    contador = 0;
                    if (noRepetir) {
                        String format = String.format("%s\tRes: %s\t\nAplicacion iniciada por:%s\n Nombre Aplicacion : %s", nombreCDA, resolucion, nombreUsuario, version);
                        labl_descripcion.setText("<html><center>" + format + "</center></html>");

                    } else {
                        noRepetir = true;
                    }
                }
                labelFecha.setText(sf.format(new Date()));
            }
        });
        timer.start();

    }

    private void inciarHiloHumedadTemperatura() {
        try {
            String strMarcaTermohigrometro = UtilPropiedades.cargarPropiedad("MarcaTermoHigrometro", "propiedades.properties");
                     
            if (strMarcaTermohigrometro.equalsIgnoreCase("Artisan")) {
                 System.out.println("readArtisan");
                termoHigrometroArtisan = new TermoHigrometroArtisan();                
                timerTermoHigrometro = new Timer(3200, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        try {
                           String strFuncionTermo = UtilPropiedades.cargarPropiedad("FuncionTermoHigrometro", "propiedades.properties"); 
                           if(strFuncionTermo.equalsIgnoreCase("Master")){
                               System.out.println("readArtisanMaster");
                              termoHigrometroArtisan.capturaDatos();                            
                           }else{
                                System.out.println("readArtisanSLAVE    ");
                               termoHigrometroArtisan.capturaSlave();                              
                           }      
                          
                           displayMultiHumedad.setLcdValue(Double.parseDouble(termoHigrometroArtisan.obtenerHumedad()));
                           displayMultiTemp.setLcdValue(Double.parseDouble(termoHigrometroArtisan.obtenerTemperatura()));                              
                       } catch (Exception exc) {  
                            int v =0;
                        }
                    }
                });
            } else {
                termoHigrometro = new TermoHigrometroPCSensors();
                termoHigrometro.obtenerValores();
                timerTermoHigrometro = new Timer(2000, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        try {
                            MedicionTermoHigrometro medicion = termoHigrometro.obtenerValores();
                            /*System.out.println("leyendo temperatura en " + TermoHigrometroPCSensors.temp);
                             System.out.println("leyendo humeda en " + TermoHigrometroPCSensors.hum);*/
                            displayMultiHumedad.setLcdValue(medicion.getValorHumedad());
                            displayMultiTemp.setLcdValue(medicion.getValorTemperatura());
                        } catch (Exception exc) {
                        }
                    }
                });


           }
            
        } catch (Error err) {
            Mensajes.mostrarExcepcion(err);
            return;
        } catch (Exception exc) {
            Logger.getLogger("igrafica").error("No se puede iniciar el sensor de Temperatura\n"
                    + "y de humedad relativa", exc);
            return;
        } catch (Throwable t) {
            return;
        }

        timerTermoHigrometro.start();
    }

    
    /*
    
    private void iniciarHiloOpacimetro() {//HILO PARA VALIDAR OPACIMETRO CADA HORA 
        
        try {  
            ImageIcon image = new ImageIcon(this.getClass().getResource("/imagenes/car.png"));      
            TempOpaci = UtilPropiedades.cargarPropiedad("TemporizadorOpacimetro", "propiedades.properties");//LEE EL VALOR DE LA VARIABLE TemporizadorOpacimetro
            System.out.println("valor de TempOpaci :" + TempOpaci);
        
            TempOpaci=(TempOpaci==null)?"":TempOpaci;    

        if (TempOpaci.equalsIgnoreCase("") || TempOpaci.equalsIgnoreCase("false") )//LA VARIABLE ESTA VACIA O ESTA CONFIGURADA COMO FALSE
        {
            TempOpaci = "";
            System.out.println("temporizador apagado, la variable TemporizadorOpacimetro esta configurada en false, esta vacia o no existe");
        }

        else{
             System.out.println("temporizador del opacimetro esta activado");
             
             timerOpacimetro = new Timer(1000, new ActionListener() {
                    public void actionPerformed(ActionEvent e) 
                    {
                                segundo=segundo+1;
                                if(segundo > 59)//AUMENTA SEGUNDO
                                  {
                                        segundo=0;
                                        minuto=minuto+1;
                                        if(minuto ==55)
                                        {
                                           Mensajes.messageDoneTime("Dentro de 5 minutos se realizara la prueba del opacimetro",15);//SI ESTA EN EL MINUTO 55 MUESTRA MENSAJE PARA NOTIFICAR QUE SE HARA LA PRUEBA EN 5 MINUTOS 
                                            System.out.println("FALTAN 5 MINUTOS PARA REALIZAR VALIDACION DEL OPACIMETRO");
                                           segundo = segundo+15;//SUMO LOS 5 SEGUNDOS DEL MENSAJE
                                        }                                        
                                        
                                        if(minuto > 59)//AUMENTA HORA
                                        {
                                                
                                                Mensajes.messageDoneTime("Realizando validacion de opacimetro",10);
                                                System.out.println("validando opacimetro");//SI SE CUMPLE LA HORA VALIDA OPACIMETRO Y REINICIA VALORES
                                                dlgServicioOpacimetro = new JDialogServicioOpacimetro(null, true);
                                                dlgServicioOpacimetro.setTitle("Validacion opacimetro ");
                                                //dlgServicioOpacimetro.setDefaultCloseOperation(JDialogServicioOpacimetro.DISPOSE_ON_CLOSE);
                                                dlgServicioOpacimetro.setDefaultCloseOperation(JDialogServicioOpacimetro.DISPOSE_ON_CLOSE);
                                                dlgServicioOpacimetro.setVisible(true);
                                                Logger.getLogger("igrafica").info("se realiza validacion del opacimetro, usuario logeado :" + nombreUsuario );
                                                minuto=0;
                                                segundo=0;
                                        }
                                       System.out.println( minuto +":"+ segundo); //MUESTRA TEMPORIZADOR
                                   }else{
                                        System.out.println( minuto +":"+ segundo);//MUESTRA TEMPORIZADOR
                                        }
                    }
              });
                timerOpacimetro.start();
            }   
        } catch (IOException ex) 
            {
                System.out.println("error al leer el archivo de configuracion para inicializar el temporizador del opacimetro " + ex);
               JOptionPane.showMessageDialog(null, "Error al leer el archivo propiedades.properties", "ERROR DE LECTURA", JOptionPane.WARNING_MESSAGE);
            }
    }
    */

    
    private void refrescarInfo() throws SQLException, ClassNotFoundException, IOException {
        if (serialBanco != null && !serialBanco.equals("X")) {
            Integer idEquipo = new EquipoController().findIdEquipoBySerial(serialBanco);
            fechaFugas = sdf.format(new CalibracionController().findPruebaFugas(idEquipo).getFecha());
            fechaVerificacion = sdf.format(new CalibracionDosPuntosController().findCalibracionDosPuntos(idEquipo).getFecha());
            consecutivoPruebasGasolina = UtilInfoServicioGases.obtenerConsecutivoGases();
        }
    }

    private void iniciarProgramaAuditoria() {
        PanelServicioBanco panelServicioBanco = new PanelServicioBanco();
        panelServicioBanco.habilitarBotonnesAuditoria();
        JDialog dialog = new JDialog(this, true);
        dialog.add(panelServicioBanco);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setSize(this.getToolkit().getScreenSize());
        dialog.setVisible(true);
    }

    private boolean equipoBloqueado() {
        boolean equipoBloqueado = false;

        try {
            if (serialBanco != null && !serialBanco.equals("X")) {
                equipoBloqueado = UtilInfoServicioGases.isEquipoBloqueado(serialBanco);
            } else {
                equipoBloqueado = false;
            }
        } catch (ClassNotFoundException | SQLException e) {
            Mensajes.mostrarExcepcion(e);
        }

        return equipoBloqueado;
    }

    public void setNombreUsuario(String nombreUsuario) {
        this.nombreUsuario = nombreUsuario;
    }

    public  String InciarInfoGasolina(){
        
        Equipo equipo = new Equipo();
        StringBuilder sb = new StringBuilder();
        try {
            
            serialBanco = UtilFugas.obtenerSerialBanco();
            equipo = controller.findEquipoBySerial(serialBanco.toString());
            Calibracion calibracion = new CalibracionController().findCalibracionGasolina(equipo.getIdEquipo());
            Calibracion c = new CalibracionController().findCalibraciontipotres(equipo.getIdEquipo());

            if (!serialBanco.equals("")) {
                //infoAnalizador = UtilPropiedades.cargarPropiedad(serialBanco, "propiedades.properties");

                fechaFugas = sdf.format(calibracion.getFecha());
                fechaAjuste = sdf.format(c.getFecha());
                consecutivoPruebasGasolina = UtilInfoServicioGases.obtenerConsecutivoGases();

                
                sb.append("Serial del Banco: ").append(equipo.getSerialresolucion()).append("\n");
                sb.append("PEF: ").append("0." + equipo.getPef()).append("\n");
                sb.append("Marca: ").append(equipo.getMarca()).append("\n");
                sb.append("Fecha de Fugas: ").append(fechaAjuste).append("\n");
                sb.append("Fecha de Verificacion: ").append(fechaFugas).append("\n");
                sb.append("Damab: ").append(equipo.getResolucionambiental()).append("\n");
            } else {
                serialBanco = " --";
                pef = "--";
                marcaBanco = "--";
                fechaFugas = "--";
                fechaVerificacion = "--";
                consecutivoPruebasGasolina = 0;
                sb.append("sin informacion");
            }

            //            if (infoAnalizador == null) {
                //                infoAnalizador = "Falta la propiedad de configuracion";
                //            }
        } catch (Exception exc) {
            sb.append("No hay informacion");
            
        }

        
        
        return sb.toString();
    }
    
 
         
    
}
