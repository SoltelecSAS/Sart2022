/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_moca_SFrenosv2 extends javax.swing.JDialog {

    /**
     * Creates new form Frm_moca_SFrenosv2
     */
    public Frm_moca_SFrenosv2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarConexion() ;
    }
    final int alta = 100;
    final int baja = 1;
    private int defecto;
    private int contadorA = 0;
    private int contadorB = 0;
    private String cadenaRExterior = "\n";
    private String grupo = "";
    private boolean aprobado = true;
    //AGREGAR A LA CADENA EL TITULO DEL GRUPO CORRESPONDIENTE, esto por que hay varios grupos en una misma ventana
    private boolean cilindroEstablecido = false;
    private boolean tubosEstablecido = false;
    private boolean suspensionEstablecido = false;
    private boolean rinesEstablecido = false;
    private boolean motorEstablecido = false;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    //-------------
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;

    /**
     * Creates new form Frm_moca_SFrenos
     */
    public Frm_moca_SFrenosv2(java.awt.Frame parent, boolean modal, int idVehiculo,
            int hojaPruebasActual, int idPrueba) {
        super(parent, modal);
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        cargarConexion() ;
        
    }

    public Frm_moca_SFrenosv2() {
        cargarConexion() ;
    }
    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jCheckBox6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox6.setText("Tubos o mangueras deteriorados, dañados, deformados o excesivamente corroidos o con riesgo de desprendimiento");

        jCheckBox5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox5.setText("Pérdidas de líquido en los tubos, mangueras o en las conexiones");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6)
                .addContainerGap(226, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tubos y mangueras de frenos", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/disk_24.png")), jPanel4); // NOI18N

        jCheckBox7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox7.setText("Mordazas de freno con fugas visibles o con riesgo de desprendimiento (faltan tornillos)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox7)
                .addContainerGap(194, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox7)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mordaza de freno", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/link_24.png")), jPanel5); // NOI18N

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox1.setText("Fundas, cables, guayas o varillas deterioradas, con riesgo de desprendimiento o interferencia con otros elementos");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Guayas", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/link_24.png")), jPanel6); // NOI18N

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox2.setText("Cilindro maestro (bomba de freno) deteriorado, con fuga de líquido o con riesgo de desprendimiento");

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox3.setText("Cantidad de líquido de frenos por fuera de los niveles indicados");

        jCheckBox4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox4.setText("Ausencia de la tapa del depósito de líquido de frenos");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addContainerGap(203, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cilindro maestro (Bomba de freno)", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/tray_24.png")), jPanel11); // NOI18N

        jCheckBox12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox12.setText("Falta alguna de las tuercas, en cualquier rueda del motocarro");

        jCheckBox13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox13.setText("Deformaciones en cualquiera de los rines");

        jCheckBox14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox14.setText("Fisuras en cualquiera de los rines");

        jCheckBox15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox15.setText("Despegue o rotura en las bandas laterales de una o más llantas");

        jCheckBox16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox16.setText("Protuberancias, deformaciones, despegue o rotura en la banda de rodamiento de una o más llantas");

        jCheckBox17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox17.setText("<html>Profundidad de labrado en el área de mayor desgaste de cualquiera de las llantas de servicio, menor a 1 mm o <br/>inferior a las marcas de desgaste especificadas por los fabricantes</html>");
        jCheckBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15)
                    .addComponent(jCheckBox16)
                    .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Rines y Llantas", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/video_rec_24.png")), jPanel13); // NOI18N

        jCheckBox11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox11.setText("Fijación defectuosa o con riesgo de desprendimiento en cualquiera de los elementos de la dirección");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox11)
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox11)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dirección", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/arrow_24.png")), jPanel1); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 759, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Soporte de estacionamiento", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/resize_24.png")), jPanel2); // NOI18N

        jCheckBox8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox8.setText("Mal estado de las fijaciones al chasis de los elementos de la suspensión");

        jCheckBox9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox9.setText("<html>Elementos de la suspensión en el mal estaod (amortiguadores, rodamientos,<br/> bujes de amortiguadores, bujes de tijera, pasador) deformados, con juegos excesivos o corrosión.</html>");

        jCheckBox10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox10.setText("Fugas visibles en los amortiguadores, cuando aplique");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10)
                .addContainerGap(187, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Suspension", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/arrow_up_24.png")), jPanel3); // NOI18N

        jCheckBox22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox22.setText("Pérdidas de aceite sin goteo continuo");

        jCheckBox23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox23.setText("Pérdidas de aceite con goteo continuo");

        jCheckBox24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox24.setText("Mal estado del cableado eléctrico");

        jCheckBox25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox25.setText("Fugas en el sistema de refrigeración, cuando aplique.");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox22)
                    .addComponent(jCheckBox23)
                    .addComponent(jCheckBox24)
                    .addComponent(jCheckBox25))
                .addContainerGap(404, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox25)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Motor y Caja", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/gear_24.png")), jPanel9); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>SISTEMA DE FRENOS <br/> SUSPENSIÓN - DIRECCIÓN <br/> MOTOR / CAJA</center></html>");

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rueda.png"))); // NOI18N

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        cancelar.setText("cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Conexion con la base de datos 
private void cargarConexion() 
    {
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
    }  
   //INSERTAR DEFECTOS EN LA BASE DE DATOS  
private boolean insertarDefectosDb(String query,int codigo,int  idPrueba) 
    {
        try 
        {
            conexion.setAutoCommit(false);
            PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(query);
            instruccion.setInt(1, codigo);
            instruccion.setInt(2, idPrueba);
            instruccion.executeUpdate();
            instruccion.clearParameters();
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Se registra defecto : " + codigo + " correctamente ");
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            return true;
        } catch (SQLException ex) 
        {
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Error fatal al registrar defecto : " + codigo);
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            Logger.getLogger(Frm_moca_SFrenosv2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
        
        
    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed

          boolean persistir = false;
        String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
        
        
     if (jCheckBox1.isSelected()) {
            persistir=insertarDefectosDb(statement,55003,idPrueba);
     }
    if (jCheckBox2.isSelected()) {
            persistir=insertarDefectosDb(statement,55004,idPrueba);
     }
    if (jCheckBox3.isSelected()) {
            persistir=insertarDefectosDb(statement,55005,idPrueba);
     }
    if (jCheckBox4.isSelected()) {
            persistir=insertarDefectosDb(statement,55006,idPrueba);
     }
    if (jCheckBox5.isSelected()) {
            persistir=insertarDefectosDb(statement,55010,idPrueba);
     }
    if (jCheckBox6.isSelected()) {
            persistir=insertarDefectosDb(statement,55011,idPrueba);
     }
    if (jCheckBox7.isSelected()) {
            persistir=insertarDefectosDb(statement,54009,idPrueba);
     }
    if (jCheckBox8.isSelected()) {
            persistir=insertarDefectosDb(statement,65008,idPrueba);
     }
    if (jCheckBox9.isSelected()) {
            persistir=insertarDefectosDb(statement,65006,idPrueba);
     }
    if (jCheckBox10.isSelected()) {
            persistir=insertarDefectosDb(statement,65007,idPrueba);
     }
    if (jCheckBox11.isSelected()) {
            persistir=insertarDefectosDb(statement,44000,idPrueba);
     }
    if (jCheckBox12.isSelected()) {
            persistir=insertarDefectosDb(statement,15045,idPrueba);
     }
    if (jCheckBox13.isSelected()) {
            persistir=insertarDefectosDb(statement,15046,idPrueba);
     }
    if (jCheckBox14.isSelected()) {
            persistir=insertarDefectosDb(statement,15047,idPrueba);
     }
    if (jCheckBox15.isSelected()) {
            persistir=insertarDefectosDb(statement,15048,idPrueba);
     }
    if (jCheckBox16.isSelected()) {
            persistir=insertarDefectosDb(statement,15049,idPrueba);
     }
    if (jCheckBox17.isSelected()) {
            persistir=insertarDefectosDb(statement,15050,idPrueba);
     }
    if (jCheckBox22.isSelected()) {
            persistir=insertarDefectosDb(statement,15051,idPrueba);
     }
    if (jCheckBox23.isSelected()) {
            persistir=insertarDefectosDb(statement,15052,idPrueba);
     }
    if (jCheckBox24.isSelected()) {
            persistir=insertarDefectosDb(statement,15053,idPrueba);
     }
    if (jCheckBox25.isSelected()) {
            persistir=insertarDefectosDb(statement,15054,idPrueba);
     }
        
        /*if (jCheckBox1.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55003);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
               // conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox2.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55004);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
              //  conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox3.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55005);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
              //  conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox4.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55006);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

             //   conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox5.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55010);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

              //  conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55011);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

            //    conexion.commit();
             //   conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox7.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 54009);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
              //  conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

        }

        if (jCheckBox8.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 65008);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

             //   conexion.commit();
             //   conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox9.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 65006);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

             //   conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox10.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 65007);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
               // conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox11.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 44000);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                //conexion.commit();
                //conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox12.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15045);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                //conexion.commit();
                //conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox13.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15046);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                //conexion.commit();
                //conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox14.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15047);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

               // conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox15.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15048);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();
                //conexion.commit();
                //conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox16.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15049);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                //conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox17.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15050);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

              //  conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox22.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15051);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
               // conexion.commit();
              //  conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox23.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15052);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
               // conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox24.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15053);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
              //  conexion.commit();
               // conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox25.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15054);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }*/
        doClose(0);
          if (persistir == true) 
        {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos (Motor) de una Manera Exitosa ", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                Logger.getLogger(Frm_moca_SFrenosv2.class.getName()).log(Level.SEVERE, null, e);
                Mensajes.mostrarExcepcion(e);
            }
           
        }
        nrei.establecer_oprimido(true);

    }//GEN-LAST:event_guardarActionPerformed

    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaRExterior) {
        this.cadenaRExterior += cadenaRExterior + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaRExterior;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }
    /////////////////////////////////////////////////////////////////////////////////////

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        doClose(0);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jCheckBox17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox17ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_moca_SFrenosv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_moca_SFrenosv2 dialog = new Frm_moca_SFrenosv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
