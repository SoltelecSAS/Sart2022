/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.soltelec.dao.ControladorVerificar;
import com.soltelec.dao.HojaPruebasJpaController;
import com.soltelec.dao.PruebasJpaController;
import static com.soltelec.igrafica.Frm_UICentral.em;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.persistencia.conexion.DBUtil;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.persistence.EntityManager;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.soltelec.util.Mensajes;
import javax.swing.JInternalFrame;
import javax.swing.SwingUtilities;
import com.soltelec.igrafica.retroRreflectivas;
import com.soltelec.model.HojaPruebas;
import com.soltelec.model.Pruebas;
/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_ASenalizacionv2 extends javax.swing.JDialog {

    private int contadorA = 0;
    private int contadorB = 0;
    private boolean aprobado = false;
    private String cadenaERuido = "";
    private String grupo = "";
    private Connection conexion;
    private String usuario;
    private String password;
    private int hojaPruebasActual;
    private HojaPruebas hojaPruebas;
    private String direccionIP;
    NoReiniciable nrei;
    public int idPrueba;
    public Pruebas prueba;
    private retroRreflectivas r;
    protected static EntityManager em;

    public Frm_ASenalizacionv2() {
    }

    public Frm_ASenalizacionv2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    public Frm_ASenalizacionv2(java.awt.Frame parent, boolean modal, int idPrueba, int hojaPruebasActual) {
        super(parent, modal);
        this.idPrueba = idPrueba;
        this.hojaPruebasActual = hojaPruebasActual;
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jDialog3 = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCheckBox1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox1.setText("<html>El no funcionamiento de los comandos<br/> que encienden y conmutan las luces</html>");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox2.setText("<html>Mal estado (Con riesgo de desprendimiento o ausencia de las pastas o vidrios)<br/> o el no funcionamiento del sistema o conjunto de luces direccionales <br/> delanteras y direccionales traseras. </html>");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox3.setText("<html>Mal estado (Con riesgo de desprendimiento o ausencia de las pastas o vidrios)<br/> o el no funcionamiento del sistema o conjunto de luces de parada o freno</html>");

        jCheckBox4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox4.setText("<html>Mal estado (Con riesgo de desprendimiento o ausencia de las pastas o vidrios) <br/>o el no funcionamiento del sistema o conjunto de luces de reversa<html>");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jCheckBox5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox5.setText("<html>Mal estado (Con riesgo de desprendimiento o ausencia de las pastas o vidrios) <br/>o el no funcionamiento del sistema o conjunto de luces de estacionamiento<html>");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });

        jCheckBox6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox6.setText("<html>Mal estado (Con riesgo de desprendimiento o ausencia de las pastas o vidrios)<br/> o el no funcionamiento del sistema o conjunto de luces de posición</html>");

        jCheckBox7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox7.setText("<html>El no funcionamiento de las luces o indicadores de tablero de instrumentos, <br/>(como mínimo luces plenas o altas, batería, aceite y falla de motor si aplica).</html>");

        jCheckBox8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox8.setText("<html>Mal estado o funcionamiento parcial de las luces interiores en los vehículos<br/> de servicio público de pasajeros.</html>");

        jCheckBox9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox9.setText("Falla total de las luces interiores en vehiculos de servicio público de pasajeros");

        jCheckBox15.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox15.setText("<html>Existencia de luces exploradoras delanteras por encima del nivel de las <br/>defensas, cuando no es equipo original del fabricante</html>");

        jCheckBox13.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox13.setText("<html>Cantidad o número de luces mínimas reglamentarias y/o color de luz emitido <br/>diferente en la estipulada en la reglamentación vigente o disposiciones legales</html>");

        jCheckBox12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox12.setText("Testigos o indicadores encendidos en el tablero de instrumentos que indican falla.");

        jCheckBox11.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox11.setText("<html>Mal estado o el no funcionamiento de la luz que indica que se encuentra<br/> libre para prestar el servicio, en los vehículos públicos de servicio individual<br/> urbano (Ejemplo: Taxis)<html>");

        jCheckBox16.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox16.setText("<html>Inexistencia o mal funcionamiento del dispositivo de control de velocidad, para<br/> vehiculos de servicio público de pasajeros en los que aplique, de acuerdo a </html>");
        jCheckBox16.setActionCommand("<html>Inexistencia o mal funcionamiento del dispositivo de control de velocidad, para vehiculos de servicio público de pasajeros en los que aplique, de acuerdo a la reglamentación vigente y con el procedimiento adoptado por la  autoridad competente</html>");

        jCheckBox10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox10.setText("<html>Inexistencia de las señales reflectivas reglamentarias, de acuerdo con<br/> las normales vigentes</html>");
        jCheckBox10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox10MouseClicked(evt);
            }
        });
        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox10ActionPerformed(evt);
            }
        });

        jCheckBox14.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jCheckBox14.setText("Existencia de luces exploradoras traseras");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("la reglamentación vigente y con el procedimiento adoptado por la autoridad competente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4))
                    .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alumbrado y señalizacion", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bulb_on_24.png")), jPanel7); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>ALUMBRADO Y <br/>SEÑALIZACIÓN</center></html>");

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/auto.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        jButton2.setText("cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaERuido) {
        this.cadenaERuido += cadenaERuido + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaERuido;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        establecerGrupo("Alumbrado y señalización: ");
         boolean persistir = false;
        try {
            conexion = DBUtil.getConnection();           
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
        if (jCheckBox1.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10041);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox2.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10042);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox3.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10043);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;           
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox4.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10044);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox5.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10045);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10046);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

        }

        if (jCheckBox7.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10047);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;                
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox8.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10048);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox9.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10049);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        // Codigo de checkbox de las cintas retrorreflectivas
        if (jCheckBox10.isSelected()) {
            
            try {
                
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10050);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            

        }
        if (jCheckBox11.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10051);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox12.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10052);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox13.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10053);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

        }
        if (jCheckBox14.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10075);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox15.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10076);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
 
        if (jCheckBox16.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10077);
                instruccion.setInt(2, idPrueba);
                
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (persistir == true) {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos (Alumbrado y Señalización) de una Manera Exitosa ");
            } catch (SQLException ex) {
                com.soltelec.modulopuc.utilidades.Mensajes.mostrarExcepcion(ex);
            }
        }
        //Frm_Placas verificacion = new Frm_Placas("btn_ivisual ");
        doClose(0);
        nrei.establecer_oprimido(true);
    }//GEN-LAST:event_guardarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jCheckBox10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox10MouseClicked
        
        if(jCheckBox10.isSelected()) {
            Frame fd = (Frame) (SwingUtilities.getWindowAncestor(this));
            retroRreflectivas cintas;
            HojaPruebasJpaController hc = new HojaPruebasJpaController();
            hojaPruebas = hc.findHojaPruebas(hojaPruebasActual);
            ControladorVerificar controladorVerificar = new ControladorVerificar();
            String txtObs = controladorVerificar.exisObsCrud(this.idPrueba, em);
            String[] lstObs = txtObs.split("Cintas retrorreflectivas");
            cintas = new retroRreflectivas(fd, true, idPrueba, hojaPruebasActual);
            cintas.setTitle("Cintas Retrorreflectivas");
            cintas.setLocationRelativeTo(null);
            cintas.setVisible(true);
          }
     
    }//GEN-LAST:event_jCheckBox10MouseClicked

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_ASenalizacionv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_ASenalizacionv2 dialog = new Frm_ASenalizacionv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton guardar;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
