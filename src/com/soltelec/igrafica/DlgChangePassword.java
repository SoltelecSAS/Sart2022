/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgChangePassword.java
 *
 * Created on 2/12/2011, 11:45:54 AM
 */

package com.soltelec.igrafica;

import com.soltelec.dao.UsuariosJpaController;
import com.soltelec.model.Usuarios;
import com.soltelec.util.UtilFecha;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.EntityManager;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author GerenciaDesarrollo
 */
public class DlgChangePassword extends javax.swing.JDialog {
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    private UsuariosJpaController ujc;
    private String pass;

   

    /** Creates new form DlgChangePassword */
    public DlgChangePassword(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
        this.setLocationRelativeTo(parent);
        this.setTitle("SART 1.7.3 Cambio de Contraseña");
        this.pswdUno.setText("");
        this.pswdUno.setColumns(15);
        this.pswdConfirm.setText("");
        this.pswdConfirm.setColumns(15);
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pswdUno = new javax.swing.JPasswordField();
        pswdConfirm = new javax.swing.JPasswordField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Nueva Contraseña");

        jLabel2.setText("Confirme Nueva Contraseña");

        pswdUno.setText("jPasswordField1");

        pswdConfirm.setText("jPasswordField2");

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        txtArea.setLineWrap(true);
        txtArea.setRows(5);
        txtArea.setText("\tSu nueva contraseña debe tener las siguientes caracteristicas\n-Longitud minima 8.\n-Debe contener letras mayusculas y minusculas.\n-No debe contener caracteres seguidos.\n-Debe incluir letras y numeros.\n-Debe contener por lo menos un simbolo especial\n Ejemplo (@!\"#$%&/()=?¡+-*/-.,)");
        jScrollPane2.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(35, 35, 35)
                        .addComponent(pswdUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(35, 35, 35))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton)
                            .addComponent(pswdConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(pswdUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pswdConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        String strPas1 = new String(pswdUno.getPassword());
        String strPasConfirm = new String(pswdConfirm.getPassword());

        
        if(strPas1.equals(strPasConfirm)){               
                if (validarRestricciones(strPasConfirm, this.txtArea)){
                //validar que no sea la misma contraseña anterior
                Usuarios usuarioByNick = ujc.getPassWord(pass);

                if(usuarioByNick.getContrasenia().equals(strPas1)){
                   JOptionPane.showMessageDialog(rootPane, "Cambie la contraseña no escriba la misma!!!");
                   ujc.getEntityManager().close();                   
                   return;
                } else{
                    usuarioByNick.setContrasenia(strPas1);
                    Calendar c = Calendar.getInstance();
                    c.setTime(UtilFecha.fechaHoy(ujc.getEntityManager()));
                    c.add(Calendar.MONTH, +1);
                    usuarioByNick.setFechavalidacion(new java.sql.Date(c.getTimeInMillis()));
                    EntityManager em = null;
                    JOptionPane.showConfirmDialog(this,"Contraseña cambiada correctamente", "Exito en la operación",  JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
                    try {
                        em = ujc.getEntityManager();
                       if(em.getTransaction().isActive()==false){                          
                             em.getTransaction().begin();
                       }                      
                        em.merge(usuarioByNick);
                        em.getTransaction().commit();
                        doClose(RET_OK);
                        return;
                   
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null,"Error cambiando la contraseña");
                        ex.printStackTrace();
                    }
                    finally{
                       
                    }
                    
                }

                }else {
                         return;
                }
        } else {
            txtArea.setText("");
            txtArea.setText("Ingrese la misma contraseña\n en los dos campos");
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                DlgChangePassword dialog = new DlgChangePassword(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField pswdConfirm;
    private javax.swing.JPasswordField pswdUno;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    
    /**
     * Valida las restricciones para las contraseñas
     * 1. Restriccion de Longitud
     * 2. Restriccion alfa numerica 
     * 4. Restriccion de caracteres seguidos
     * @param strPasConfirm
     * @param mensaje
     * @return
     */
    private boolean validarRestricciones(String strPasConfirm, JTextArea txtArea) {
        //Expresion regular par identificar que tenga un digito y un numero
        Pattern patron = Pattern.compile("[0-9]+[A-z]+|[A-z]+[0-9]");
        String pattern ="(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}"; 
        Matcher m = patron.matcher(strPasConfirm);
       // Matcher m = pattern.matcher(strPasConfirm);
        
       

        if(!m.find()){
            txtArea.setText("Disculpe; La nueva contraseña debe tener"
                    + "Digitos y Letras");
            return false;
        } else if(strPasConfirm.length() < 8){
            txtArea.setText("LONGITUD INCORRECTA");
            return false;
        }else if(contieneCaracteresSeguidos(strPasConfirm)){
            txtArea.setText("Disculpe; CONTIENE CARACTERES CONSECUTIVOS "
                    + " O DOS CARACTERES IGUALES SEGUIDOS Ej: ABCDE o EDCBA \n | 12345 o 54321 ");
            return false;
        }else if(!contieneCaracteresEspeciales(strPasConfirm)){
            txtArea.setText("Disculpe; \n LA CONTRASEÑA NO CONTIENE CARACTERES ESPECIALES \n, POR FAVOR USE POR LO MENOS UN CARACTER ESPECIAL \n EJEMPLO :(@!#$%&/()=?¡+-*/)");
            return false;
        }
        return true;
    }

    private boolean contieneCaracteresSeguidos(String cadena){
        char[] caracteres = cadena.toCharArray();
        for(int i = 0; i < caracteres.length -1; i++){
            char c = caracteres[i];
            char sigChar = caracteres[i+1];
            int valorAbs = Math.abs( (short)c -(short)sigChar );
            if( valorAbs == 1 || valorAbs == 0){
                return true;
            }
        }
        return false;
    }//end of method contieneCaracteresSeguidos
    
    
    
    private boolean contieneCaracteresEspeciales(String cadena){
        
        int tamaño= cadena.length();
        int contador=0;
        boolean respuesta = false;
        char pass[] = new char[tamaño];
        pass= cadena.toCharArray();
        
        for(int i=0 ; i<tamaño ; i++ )
        {  int valor = (int) pass[i];
            System.out.println("caracter: " + pass[i] + "valor: " + valor );
            if((int)pass[i] > 32  && (int) pass[i] <=47 || (int)pass[i] >= 58  && (int) pass[i] <=64 || (int)pass[i] >= 91  && (int) pass[i] <=96 || (int)pass[i] >= 123  && (int) pass[i] <=255 )
            {
                contador++;
                
            }
            
        }
        if(contador >0){
            respuesta = true;
        }else{
            respuesta = false;
        }
        return respuesta;
     
        
    }

    public UsuariosJpaController getUjc() {
        return ujc;
    }

    public void setUjc(UsuariosJpaController ujc) {
        this.ujc = ujc;
    }

    public String getPass() {
        return pass;
    }

    public void setPass(String pass) {
        this.pass = pass;
    }
}
