/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_moca_RInteriorv2 extends javax.swing.JDialog {

    final int alta = 100;
    final int baja = 1;
    private int defecto;
    private int contadorA = 0;
    private int contadorB = 0;
    private String cadenaRExterior = "\n";
    private String grupo = "";
    private boolean aprobado = true;
    //AGREGAR A LA CADENA EL TITULO DEL GRUPO CORRESPONDIENTE, esto por que hay varios grupos en una misma ventana
    private boolean habitaculoEstablecido = false;
    private boolean cinturonesEstablecido = false;
    private boolean alumbradoEstablecido = false;
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    //-------------

    /**
     * Creates new form Frm_moca_RInterior
     */
    public Frm_moca_RInteriorv2(java.awt.Frame parent, boolean modal, int idVehiculo,
            int hojaPruebasActual, int idPrueba) {
        super(parent, modal);
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;        
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        cargarConexion();
    }

    public Frm_moca_RInteriorv2() {
        cargarConexion();
    }


    /**
     * Creates new form Frm_moca_RInteriorv2
     */
    public Frm_moca_RInteriorv2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        cargarConexion();
        setResizable(false);
    }
    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }
    //////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO/////////

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("REVISIÓN INTERIOR- ALUMBRADO/SEÑALIZACIÓN - MECANISMOS DE ACCIONAMIENTO DE FRENOS");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox1.setText("Asientos mal anclados o con riesgo de desprendimiento");

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox2.setText("<html>Elementos deteriorados, sueltos o con riesgo de desprendimiento que pueden ocasionar lesiones a los ocupantes del<br/> vehículo. (Asideros, manijas, y portaequipajes)</html>");

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox3.setText("<html>La existencia en el in terior del habitáculo o cabina de partes puntiagudas o con aristas<br/> que puedan elsionar a los ocupantes del vehículo</html>");

        jCheckBox4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox4.setText("Sillas, carteras y tapizados en mal estado (Rota, cortada, descosida)");

        jCheckBox5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox5.setText("Estado o funcionamiento deficiente de las chapas y seguros, cuando aplique");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addContainerGap(221, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Habitáculo del conductor y pasajeros", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/app_24.png")), jPanel7); // NOI18N

        jCheckBox6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox6.setText("Sillín y/o reposapiés mal anclados o con riesgo de desprendimiento");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox6)
                .addContainerGap(318, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox6)
                .addContainerGap(342, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sillin y reposapies", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/minus_24.png")), jPanel1); // NOI18N

        jCheckBox7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox7.setText("<html>Inexistencia o mal funcionamiento del cinturón (anclajes dañados, cierre del broche no funcional, <br/>sujeción deficiente y/o deterioro evidente en el área de la correa)</html>");

        jCheckBox8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox8.setText("<html>Anclajes o sistemas de broche con materiales diferentes a metálicos (no debe haber sistema<br/> de cierre plástico o con hebilla plástica)</html>");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(287, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cinturones de seguridad y sus anclajes", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/warning_24.png")), jPanel2); // NOI18N

        jCheckBox9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox9.setText("El no funcionamiento de los comandos que encienden y conmutan las luces");

        jCheckBox10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox10.setText("<html>Mal estado (con riesgo de desprendimiento o ausencia de las pastas o vidrios) o no funcionamiento del sistema<br/> o conjunto de luces direccionales delanteras y direccionales traseras</html>");

        jCheckBox11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox11.setText("<html>Mal estado (con riesgo de desprendimiento o ausencia de las pastas o vidrios) o el no funcionamiento<br/> del sistema o conjunto de luces de parada o freno</html>");
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });

        jCheckBox12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox12.setText("<html>Mal estado (con riesgo de desprendimiento o ausencia de las pastas o vidrios) o no funcionamiento del sistema o <br/>conjunto de luces de reversa, para vehículos 2011 en adelante</html>");

        jCheckBox13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox13.setText("<html>Mal estado (con riesgo de desprendimiento o ausencia de las pastas o vidrios) o no funcionamiento<br/> del sistema o conjunto de luces de estacionamiento</html>");

        jCheckBox14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox14.setText("<html>Mal estado (con riesgo de desprendimiento o ausencia de las pastas o vidrios) o no <br/>funcionamiento del sistema o conjunto de luces de posición</html>");

        jCheckBox15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox15.setText("<html>El no funcionamiento de las luces o indicadores de tablero de instrumentos,<br/> (como mínimo: luces plenas o altas, batería, aceite y falla de motor si aplica)</html>");

        jCheckBox16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox16.setText("<html>Cantidad o número de luces mínimas reglamentarias y/o color de luz emitido diferente en la <br/>estipulada en la reglamentación vigente o disposiciones legales</html>");

        jCheckBox17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox17.setText("Existencia de luces exploradoras traseras");

        jCheckBox18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox18.setText("<html>Existencia de luces exploradoras delanteras por encima del nivel de las <br/>defensas, cuando no es equipo original del fabricante</html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox17)
                    .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                    .addComponent(jCheckBox15))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alumbrado y señalización", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bulb_on_24.png")), jPanel3); // NOI18N

        jCheckBox19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox19.setText("Carrera o movimiento de los dispositivos de accionamiento del sistema de frenos sean excesivos o insuficientes");

        jCheckBox20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox20.setText("Retorno inadecuado del pedal/palanca del freno trasero y/o delantero");

        jCheckBox21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox21.setText("Inoperancia total del freno en alguna de las ruedas");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20)
                    .addComponent(jCheckBox21))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox21)
                .addContainerGap(296, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mecanismo de accionamiento del freno delantero y/o trasero", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/video_rec_24.png")), jPanel4); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>REVISIÓN INTERIOR<br/> ALUMBRADO/SEÑALIZACIÓN <br/> MECANISMOS DE ACCIONAMIENTO <br/>DE FRENOS</center></html>");

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/configuracionCambio.png"))); // NOI18N

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        cancelar.setText("cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaRExterior) {
        this.cadenaRExterior += cadenaRExterior + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaRExterior;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }
    
       private void cargarConexion() 
    {
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
    }
    
    
       private boolean insertarDefectosDb(String query,int codigo,int  idPrueba) 
    {
        try 
        {
            conexion.setAutoCommit(false);
            PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(query);
            instruccion.setInt(1, codigo);
            instruccion.setInt(2, idPrueba);
            instruccion.executeUpdate();
            instruccion.clearParameters();
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Se registra defecto : " + codigo + " correctamente ");
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            return true;
        } catch (SQLException ex) 
        {
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Error fatal al registrar defecto : " + codigo);
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            Logger.getLogger(Frm_moca_RInteriorv2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    
    /////////////////////////////////////////////////////////////////////////////////////

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
       
        boolean persistir = false;
        String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
        
        
        if (jCheckBox1.isSelected()) {
            persistir=insertarDefectosDb(statement,15025,idPrueba);
        }
        if (jCheckBox2.isSelected()) {
            persistir=insertarDefectosDb(statement,15026,idPrueba);
        }
        if (jCheckBox3.isSelected()) {
            persistir=insertarDefectosDb(statement,15027,idPrueba);
        }
        if (jCheckBox4.isSelected()) {
            persistir=insertarDefectosDb(statement,15028,idPrueba);
        }
        if (jCheckBox5.isSelected()) {
            persistir=insertarDefectosDb(statement,15029,idPrueba);
        }
        if (jCheckBox6.isSelected()) {
            persistir=insertarDefectosDb(statement,15030,idPrueba);
        }
        if (jCheckBox7.isSelected()) {
            persistir=insertarDefectosDb(statement,15032,idPrueba);
        }
        if (jCheckBox8.isSelected()) {
            persistir=insertarDefectosDb(statement,15031,idPrueba);
        }
        if (jCheckBox9.isSelected()) {
            persistir=insertarDefectosDb(statement,15035,idPrueba);
        }
        if (jCheckBox10.isSelected()) {
            persistir=insertarDefectosDb(statement,15036,idPrueba);
        }
        if (jCheckBox11.isSelected()) {
            persistir=insertarDefectosDb(statement,15037,idPrueba);
        }
        if (jCheckBox12.isSelected()) {
            persistir=insertarDefectosDb(statement,15038,idPrueba);
        }
        if (jCheckBox13.isSelected()) {
            persistir=insertarDefectosDb(statement,15039,idPrueba);
        }
        if (jCheckBox14.isSelected()) {
            persistir=insertarDefectosDb(statement,15040,idPrueba);
        }
        if (jCheckBox15.isSelected()) {
            persistir=insertarDefectosDb(statement,10068,idPrueba);
        }
        if (jCheckBox16.isSelected()) {
            persistir=insertarDefectosDb(statement,15042,idPrueba);
        }
        if (jCheckBox17.isSelected()) {
            persistir=insertarDefectosDb(statement,15043,idPrueba);
        }
        if (jCheckBox18.isSelected()) {
            persistir=insertarDefectosDb(statement,10112,idPrueba);
        }
        if (jCheckBox19.isSelected()) {
            persistir=insertarDefectosDb(statement,55000,idPrueba);
        }
        if (jCheckBox20.isSelected()) {
            persistir=insertarDefectosDb(statement,55001,idPrueba);
        }
         if (jCheckBox2.isSelected()) {
            persistir=insertarDefectosDb(statement,55002,idPrueba);
        }
        
        
        
        
        
        
    /*    
        if (jCheckBox1.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15025);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox2.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
               conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15026);
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox3.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15027);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox4.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15028);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox5.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15029);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15030);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox7.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15032);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox8.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15031);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox9.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15035);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox10.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15036);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox11.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15037);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox12.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15038);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox13.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15039);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox14.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15040);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox15.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
               conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10068);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox16.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15042);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox17.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15043);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox18.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10112);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox19.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55000);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox20.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55001);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox21.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 55002);
                instruccion.setInt(2, idPrueba);

                instruccion.executeUpdate();
                instruccion.clearParameters();

                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }*/
        doClose(0);
                if (persistir == true) 
        {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos (Motor) de una Manera Exitosa ", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                Logger.getLogger(Frm_moca_RInteriorv2.class.getName()).log(Level.SEVERE, null, e);
                Mensajes.mostrarExcepcion(e);
            }
           
        }
        nrei.establecer_oprimido(true);
    }//GEN-LAST:event_guardarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        doClose(returnStatus);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_moca_RInteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_moca_RInteriorv2 dialog = new Frm_moca_RInteriorv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}