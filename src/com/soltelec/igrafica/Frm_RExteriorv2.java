/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.Icon;
import com.soltelec.model.Vehiculos;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_RExteriorv2 extends javax.swing.JDialog {

    /**
     * Creates new form Frm_RExteriorv2
     */
    int numeroProblemas = 32;
    int alta = 100;
    int baja = 1;
    private int defecto;
    private int contadorA = 0;
    private int contadorB = 0;
    private String cadenaRExterior = "\n";
    private String grupo = "";
    private String placas = "";
    private boolean aprobado = true;
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    private Vehiculos vehiculo;
    //DIRECCIÓN IP DEL SERVIDOR = 186.112.176.34
    //---
    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    private Frm_RExteriorv2(JFrame jFrame, boolean b) {
        super(jFrame, b);
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }
    //////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO/////////
    NoReiniciable placas_bd;

    public NoReiniciable getPlacasBd() {
        return placas_bd;
    }

    public void setPlacasBd(NoReiniciable placas_bd) {
        this.placas_bd = placas_bd;
    }
    //////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO/////////

    public Frm_RExteriorv2(java.awt.Frame parent, boolean modal, int idVehiculo, int hojaPruebasActual, int idPrueba, Vehiculos vehiculo) {
       
        super(parent, modal);
        
        System.out.println("-------------------------------------------------");
        System.out.println("--------Constructor Frm_RExteriorv2--------------");
        System.out.println("-------------------------------------------------");
        
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;       
        initComponents();
        this.vehiculo = vehiculo;
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        this.jTabbedPane1.setIconAt(7, new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/placa.png")));
        
        try 
        {
            System.out.println("-------------------------------------------------");
            System.out.println("--------------------Frm_RExteriorv2--------------");
            System.out.println("-------------------------------------------------");
            System.out.println(" vehiculo.getServicios().getService() = " + this.vehiculo.getServicios().getService());
            
            int servicio=this.vehiculo.getServicios().getService();
            if (servicio == 2)
            {
                this.chkPlaca2.setEnabled(true);
                this.chkPlaca3.setEnabled(true);
                this.chkPlaca1.setEnabled(true);
                this.chkPlaca4.setEnabled(true);
                this.chkPlaca5.setEnabled(true);
                this.chkPlaca6.setEnabled(true);
                this.chkPlaca7.setEnabled(true);
            }else{
                System.err.println("No se habiltara el item de defectos para placas por el tipo de servicio del vehiculo");
            }
        } catch (Exception e) 
        {
            System.out.println("Error al inicializar los comboBox en false" +e.getLocalizedMessage() + e.getMessage());
        }
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox13 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox14 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox28 = new javax.swing.JCheckBox();
        jCheckBox29 = new javax.swing.JCheckBox();
        jCheckBox30 = new javax.swing.JCheckBox();
        jCheckBox27 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBox15 = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        chkPlaca4 = new javax.swing.JCheckBox();
        chkPlaca6 = new javax.swing.JCheckBox();
        chkPlaca1 = new javax.swing.JCheckBox();
        chkPlaca3 = new javax.swing.JCheckBox();
        chkPlaca2 = new javax.swing.JCheckBox();
        chkPlaca5 = new javax.swing.JCheckBox();
        chkPlaca7 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jCheckBox21.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox21.setText("<html>Mal estado de los anclajes y demás elemntos para sujetar los contenedores cuando sea aplicable</html>");

        jCheckBox22.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox22.setText("<html>La inexistencia o mal funcionamiento de puertas o compuertas de carga para <br/>vehículos con platón estacas o furgones</html>");

        jCheckBox23.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox23.setText("<html>Puertas o compuertas de carga que no dispongan de los cierres adecuados para impedir que estas se abran<br/> por las fuerzas normales que actúan en sumovilización</html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(258, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dispositivos de retención de la carga", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/moving_24.png")), jPanel3); // NOI18N

        jCheckBox13.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jCheckBox13.setText("Inexistencia o mal funcionamiento de los limpiaparabrisas delanteros");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox13)
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox13)
                .addContainerGap(332, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Limpiabrizas", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/minus_24.png")), jPanel4); // NOI18N

        jCheckBox14.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jCheckBox14.setText("La inexistencia o deterioro de peldaños o estribos para acceso y salida del vehículo");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox14)
                .addContainerGap(188, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(341, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Peldaños", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/chart_bar_up_24.png")), jPanel5); // NOI18N

        jCheckBox17.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox17.setText("<html>La inexistencia de al menos dos espejos retrovisores funcionales<br> e independientes, o cámaras que cumplan esta función</html>");

        jCheckBox18.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox18.setText("<html>Estado de las superficies o fijación deficiente de cualquier espejo<br> retrovisor funcional</html>");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(280, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Retrovisores", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/tray_24.png")), jPanel6); // NOI18N

        jPanel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCheckBox28.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox28.setText("<html>La inexistencia o mal funcionamiento de los mecanismos de accionamiento<br/> de alguno de los vidrios para vehículos de transporte público o especial de pasajeros.</html>");

        jCheckBox29.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox29.setText("<html>La inexistencia o mal funcionamiento de los mecanismos de <br/>accionamiento de alguno de los vidrios para vehículos particulares</html>");

        jCheckBox30.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox30.setText("Vidrios que no sean transparentes en los vehículos de transporte público de pasajeros de circulación urbana.");

        jCheckBox27.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox27.setText("<html>La existencia de fisuras, impactos o laminas adheridas, publicidad o adhesivos al (a los)<br> parabrisa (s),  que dificulten el campo de visión mínima del conductor</html>");

        jCheckBox24.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox24.setText("Vidrio(s) parabrisas que distorsionan y/o deforman el campo de visión mínima del conductor");

        jCheckBox26.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox26.setText("Inexistencia de algún vidrio fijo diferente a los parabrisas");

        jCheckBox25.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox25.setText("Inexistencia de alguno de los parabrisas o de los vidros móviles");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jCheckBox27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox24)
                            .addComponent(jCheckBox25)
                            .addComponent(jCheckBox26)
                            .addComponent(jCheckBox28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox30)
                            .addComponent(jCheckBox29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(34, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox30)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Vidrios", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/resize_24.png")), jPanel7); // NOI18N

        jCheckBox20.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox20.setText("Holgura con riesgo de desprendimiento de la rueda de repuesto");

        jCheckBox19.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox19.setText("Soporte de fijación roto o alguno de sus anclajes");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20))
                .addContainerGap(320, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox20)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Soporte exterior de rueda de repuesto", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/spanner_24.png")), jPanel2); // NOI18N

        jCheckBox16.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox16.setText("<html>La inexistencia de los sistemas mecánicos, neumáticos <br/> y eléctricos de acoplamiento (Es aplicable a vehiculos <br/>diseñados para llevar remolques o semi-remolques) <html>");

        jCheckBox7.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox7.setText("Corrosion o mal estado de la carroceria");

        jCheckBox1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox1.setText("<html>Presencia de aristas vivas o bordes<br/> cortantes exteriores en el vehículo</html>");

        jCheckBox6.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox6.setText("<html>Roce o interferencia entre las llantas y el <br/>guardabarros, carroceria o suspension</html>");

        jCheckBox4.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox4.setText("<html>Partes exteriores de la carroceria o cabina <br/>en mal estado (flojas, sueltas), que presenten<br/> peligro para los demas usuarios en la via </html>");

        jCheckBox9.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox9.setText("<html>Mal estado o problemas en el funcionamiento <br/>de los dispositivos de sujecion de las cabinas basculantes.</html>");
        jCheckBox9.setMargin(new java.awt.Insets(0, 2, 2, 2));

        jCheckBox3.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox3.setText("Cierre inadecuado de baul");

        jCheckBox8.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox8.setText("<html>Perforaciones que epermitan la entrada de <br/>agua o gases en el habitaculo de pasajeros.</html>");

        jCheckBox5.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox5.setText("<html>Mal estado de los elementos de<br/> sujecion de la carroceria al chasis</html>");

        jCheckBox11.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox11.setText("<html>Inexistencia o riesgo de desprendimiento de defensas o<br> parachoques</html>");

        jCheckBox2.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox2.setText("Cierre inadecuado de puertas o capo");

        jCheckBox10.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox10.setText("<html>Presencia de fisuras, cortes, dobleces<br/> o corrosión de los largueros y travesaños del chasis<html>");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jCheckBox15.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox15.setText("Mal estado de parachoques y/o defensas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jCheckBox3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox2)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBox7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jCheckBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Carroceria y chasis", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/1334257877_muscle_car.png")), jPanel1); // NOI18N

        chkPlaca4.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca4.setText("<html>La ubicacion de la placa en la parte externa lateral en un lugar diferente a la parte media de cada costado en el caso de los vehiculos clase bus, buseta y microbus </html>");
        chkPlaca4.setEnabled(false);
        chkPlaca4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca4ActionPerformed(evt);
            }
        });

        chkPlaca6.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca6.setText("<html>La ubicacion de la placa en la parte externa lateral en un lugar diferente a la parte media de las puertas de la cabina en el caso de los vehiculos de transporte de carga </html>");
        chkPlaca6.setEnabled(false);
        chkPlaca6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca6ActionPerformed(evt);
            }
        });

        chkPlaca1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca1.setText("<html>La ubicacion de la placa en la parte externa lateral en un lugar diferente a la parte media de las puertas traseras en el caso de los vehiculos clase automovil y camioneta    </html>");
        chkPlaca1.setEnabled(false);
        chkPlaca1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca1ActionPerformed(evt);
            }
        });

        chkPlaca3.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca3.setText("<html>La inexistencia de la placa impresa en los vehiculos de servicio publico en los costados o techo del vehiculo</html>");
        chkPlaca3.setEnabled(false);
        chkPlaca3.setName(""); // NOI18N
        chkPlaca3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca3ActionPerformed(evt);
            }
        });

        chkPlaca2.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca2.setText("<html> La ubicacion de la placa en el techo en lugar diferente al eje longitudinal del vehiculo cualquiera sea la clase del vehiculo (debe estar colocada en cualquier punto a lo largo del eje longitudinal en forma perpendicular y centrada transversalmente   </html>");
        chkPlaca2.setEnabled(false);
        chkPlaca2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca2ActionPerformed(evt);
            }
        });

        chkPlaca5.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca5.setText("<html> La ubicacion de la placa (en la parte externa) en lugar diferente a la parte media del segundo cuerpo de cada costado del vehiculo en los vehiculos de servicio publico de transporte masivo, tipo articulado o biarticulado   </html>");
        chkPlaca5.setEnabled(false);
        chkPlaca5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca5ActionPerformed(evt);
            }
        });

        chkPlaca7.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        chkPlaca7.setText("<html>La ubicacion de la placa en la parte externa lateral en un lugar diferente a la parte media de las puertas delanteras en caso de los vehiculos tipo campero    </html>");
        chkPlaca7.setEnabled(false);
        chkPlaca7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPlaca7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkPlaca2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkPlaca5, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkPlaca6, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkPlaca7, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkPlaca1, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkPlaca4, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(14, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(chkPlaca3, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkPlaca2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPlaca3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkPlaca1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(chkPlaca4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chkPlaca5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkPlaca6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkPlaca7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Placas", jPanel9);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\opt\\sst\\Sart-git-3\\SART\\src\\com\\soltelec\\Icon\\solt.png")); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>REVISION<br/> EXTERIOR</center></html>");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/auto.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        jButton2.setText("cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NoReiniciable p = new NoReiniciable();
        p = Frm_Placas.placas_bd;
        //JOptionPane.showMessageDialog(null, "Placas: " +p.obtenerPlacasBd());

        boolean persistir = false;
        establecerGrupo("Revisión Exterior: ");

//        Query queryNombre = em.createQuery("SELECT v FROM Vehiculo v WHERE v.placas = :placas");
//        queryNombre.setParameter("placas", p.obtenerPlacasBd());
//        Vehiculo v = new Vehiculo(p.obtenerPlacasBd());
        //ESCRIBIR BD EN LA TABLA DEL USUARIO RECOGIDO EN LA VENTANA DE PLACAS
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }

        if (chkPlaca1.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10128);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
                //System.out.println("Datos enviados");
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (chkPlaca2.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10131);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (chkPlaca3.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10126);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (chkPlaca4.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10127);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (chkPlaca5.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10132);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (chkPlaca6.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10130);
                instruccion.setInt(2, idPrueba);                
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (chkPlaca7.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10129);
                instruccion.setInt(2, idPrueba);               
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox1.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10000);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox2.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10001);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox3.isSelected()) {
            try {   
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10002);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox4.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10003);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox5.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10004);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10005);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox7.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10006);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox8.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10007);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox9.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10008);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox10.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10010);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (jCheckBox15.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10012);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox11.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10011);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        
        if (jCheckBox13.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10054);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox14.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10055);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox16.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10009);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox17.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10014);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox18.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10015);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox19.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10016);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox20.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10056);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox21.isSelected()) {
            try { 
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10023);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox22.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10024);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox23.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10025);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox24.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10017);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox25.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10018);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox26.isSelected()) {
            try { 
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10019);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox27.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10020);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox28.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10021);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox29.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10022);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox30.isSelected()) {
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                //JOptionPane.showMessageDialog(null, "IdPrueba = " +idPrueba);
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 10057);
                instruccion.setInt(2, idPrueba);
                //instruccion.setInt(3, hojaPruebasActual);
                //instruccion.setString(4, "A");
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (persistir == true) {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                 JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos de la Revision Exterior de una Manera Exitosa ");

            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        establecerAprobado(defecto);
        //cadenaRExterior = obtenerNombreProblema();
        aprobado = obtenberAprobado();

        establecerCantidadProblemas(contadorA, contadorB);

//        if(aprobado == true)
//            JOptionPane.showMessageDialog(null, "El vehículo aprueba, los problemas que obtuvo del grupo " +obtenerGrupo() + "fueron: \n\n" +obtenerNombreProblema()
//                    +"\n\n La cantidad de problemas tipo A fueron: " +obtenerCantidadProblemasA()
//                    +"\n La cantidad de problemas tipo B fueoron: " +obtenerCantidadProblemasB(), "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
//        else
//            JOptionPane.showMessageDialog(null, "El vehículo ¡NO! aprueba, los problemas que obtuvo del grupo " +obtenerGrupo() +" fueron: \n\n" +obtenerNombreProblema()
//                    +"\n\n La cantidad de problemas tipo A fueron: " +obtenerCantidadProblemasA()
//                    +"\n La cantidad de problemas tipo B fueoron: " +obtenerCantidadProblemasB(), "ERROR", JOptionPane.ERROR_MESSAGE);
//        //Frm_Placas verificacion = new Frm_Placas("btn_ivisual ");
        doClose(
                0);
        nrei.establecer_oprimido(
                true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void chkPlaca4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca4ActionPerformed

    }//GEN-LAST:event_chkPlaca4ActionPerformed

    private void chkPlaca6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca6ActionPerformed

    }//GEN-LAST:event_chkPlaca6ActionPerformed

    private void chkPlaca1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca1ActionPerformed

    }//GEN-LAST:event_chkPlaca1ActionPerformed

    private void chkPlaca3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca3ActionPerformed

    }//GEN-LAST:event_chkPlaca3ActionPerformed

    private void chkPlaca2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca2ActionPerformed

    }//GEN-LAST:event_chkPlaca2ActionPerformed

    private void chkPlaca5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca5ActionPerformed

    }//GEN-LAST:event_chkPlaca5ActionPerformed

    private void chkPlaca7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPlaca7ActionPerformed

    }//GEN-LAST:event_chkPlaca7ActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaRExterior) {
        this.cadenaRExterior += cadenaRExterior + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaRExterior;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_RExteriorv2.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_RExteriorv2 dialog = new Frm_RExteriorv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkPlaca1;
    private javax.swing.JCheckBox chkPlaca2;
    private javax.swing.JCheckBox chkPlaca3;
    private javax.swing.JCheckBox chkPlaca4;
    private javax.swing.JCheckBox chkPlaca5;
    private javax.swing.JCheckBox chkPlaca6;
    private javax.swing.JCheckBox chkPlaca7;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox29;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox30;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
