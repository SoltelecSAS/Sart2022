/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.dao.ControladorVerificar;
import com.soltelec.dao.HojaPruebasJpaController;
import com.soltelec.dao.PruebasJpaController;
import com.soltelec.dao.exceptions.IllegalOrphanException;
import com.soltelec.dao.exceptions.NonexistentEntityException;
import com.soltelec.model.HojaPruebas;
import com.soltelec.model.Pruebas;
import com.soltelec.model.Vehiculos;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.Window;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import javax.persistence.EntityManager;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.soltelec.util.ConsultarDatosVehiculo;

/**
 *
 * @author Gerencia Desarrollo de Soluciones Tecnologicas
 */
public class Frm_InspeccionVisual extends javax.swing.JDialog {

    /**
     * Creates new form Frm_InspeccionVisual
     */
    //Variables que bloquearan cada boton, se establecerá en true, una vez se haya oprimido el botón enviar
    //en cada prueba.
    boolean oprimido = false;
    boolean bloquearRExterior = false;
    boolean bloquearRInterior = false;
    boolean bloquearERuido = false;
    boolean bloquearASeñalizacion = false;
    boolean bloquearSEmergencia = false;
    boolean bloquearEContaminantes = false;
    boolean bloquearSFrenos = false;
    boolean bloquearSuspension = false;
    boolean bloquearTaximetro = false;
    boolean appTaximetro = false;
    boolean bloquearDireccion = false;
    boolean bloquearMotor = false;
    private Connection conexion1;
    private HojaPruebasJpaController hojaPruebasController;
    private HojaPruebas hojaPruebas;

    ResultSet rs;
    //Resultset rs;
    //Frm_RExterior dlg; cambio para el nuevo diseño
    Frm_RExteriorv2_proceso frm_RExteriorv2;
    Frm_RExteriorv2 frm_RExteriorv1;
    //Frm_RInterior dlg1; cambios para el nuevo diseño
    Frm_RInteriorv2 frm_RInteriorv2;
    //Frm_ERuido dlg2; cambio para el nuevo diseño
    Frm_ERuidov2 frm_ERuidov2;
    //Frm_ASenalizacion dlg3; cambio para el nuevo diseño
    Frm_ASenalizacionv2 frm_ASenalizacionv2;
    //Frm_SEmergencia dlg4; cambio para el nuevo diseño
    Frm_SEmergenciav2 frm_SEmergenciav2;
    //Frm_EContaminantes dlg5; cambio para nuevo diseño
    Frm_EContaminantesv2 frm_EContaminantesv2;
    //Frm_SFrenos dlg6; cambio para el nuevo diseño
    Frm_SFrenosv2 frm_SFrenosv2;
    //Frm_Suspension dlg7; cambio para el nuevo diseño
    Frm_Suspensionv2 frm_Suspensionv2;
    //Frm_Taximetro dlg8;
    Frm_Taximetrov2 frm_Taximetrov2;
    //Frm_Direccion dlg9; cambio para el nuevo diseño
    Frm_Direccionv2 frm_Direccionv2;
    //Frm_Motor dlg10; cambios para el diseño
    Frm_Motorv2 frm_Motorv2;
    NoReiniciable nrei = new NoReiniciable();
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    private int idUsuario;
    private String usuario;
    private String password;
    private String direccionIP;
    private boolean isEnsenianza;
    private String txtProfLabrado;
    Vehiculos vehiculo = null;
    EntityManager em;

    public Frm_InspeccionVisual(java.awt.Frame parent, boolean modal, int idVehiculo, int hojaPruebasActual, int idPrueba, int idUsuario, boolean isEnsenianza, boolean appTaximetro, Vehiculos vehiculo, EntityManager em) {
        super(parent, modal);
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;
        this.idUsuario = idUsuario;
        this.isEnsenianza = isEnsenianza;
        this.appTaximetro = appTaximetro;
        this.em = em;
        initComponents();
        lab_ensenanza.setEnabled(isEnsenianza);
        this.vehiculo = vehiculo;
        lab_taxis.setEnabled(appTaximetro);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    private Frm_InspeccionVisual(JFrame jFrame, boolean b) {
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlgComentario = new JDialog(this);
        jScrollPane1 = new javax.swing.JScrollPane();
        txtComentario = new javax.swing.JTextArea();
        btnSaveComment = new javax.swing.JButton();
        btnCancelComment = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lab_rines = new javax.swing.JLabel();
        lab_direccion = new javax.swing.JLabel();
        lab_finalizar = new javax.swing.JLabel();
        lab_amortiguadores = new javax.swing.JLabel();
        lab_frenos = new javax.swing.JLabel();
        lab_emisiones = new javax.swing.JLabel();
        lab_taxis = new javax.swing.JLabel();
        lab_salida = new javax.swing.JLabel();
        lab_revicionInterior = new javax.swing.JLabel();
        lab_revicion = new javax.swing.JLabel();
        lab_ruido = new javax.swing.JLabel();
        lab_luces = new javax.swing.JLabel();
        lab_ensenanza = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labl_descripcion = new javax.swing.JLabel();
        btnComentario = new javax.swing.JButton();

        dlgComentario.setMinimumSize(new java.awt.Dimension(400, 300));

        txtComentario.setColumns(20);
        txtComentario.setRows(5);
        jScrollPane1.setViewportView(txtComentario);

        btnSaveComment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        btnSaveComment.setText("Guardar");
        btnSaveComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCommentActionPerformed(evt);
            }
        });

        btnCancelComment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        btnCancelComment.setText("Cancelar");
        btnCancelComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelCommentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dlgComentarioLayout = new javax.swing.GroupLayout(dlgComentario.getContentPane());
        dlgComentario.getContentPane().setLayout(dlgComentarioLayout);
        dlgComentarioLayout.setHorizontalGroup(
            dlgComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgComentarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dlgComentarioLayout.createSequentialGroup()
                        .addGap(0, 134, Short.MAX_VALUE)
                        .addComponent(btnSaveComment, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelComment, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dlgComentarioLayout.setVerticalGroup(
            dlgComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgComentarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dlgComentarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveComment)
                    .addComponent(btnCancelComment))
                .addGap(7, 7, 7))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lab_rines.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rines.png"))); // NOI18N
        lab_rines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_rinesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_rinesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_rinesMouseExited(evt);
            }
        });

        lab_direccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/direccion.png"))); // NOI18N
        lab_direccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_direccionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_direccionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_direccionMouseExited(evt);
            }
        });

        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/fin.png"))); // NOI18N
        lab_finalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_finalizarMouseExited(evt);
            }
        });

        lab_amortiguadores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguador.png"))); // NOI18N
        lab_amortiguadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_amortiguadoresMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_amortiguadoresMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_amortiguadoresMouseExited(evt);
            }
        });

        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rueda.png"))); // NOI18N
        lab_frenos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_frenosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_frenosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_frenosMouseExited(evt);
            }
        });

        lab_emisiones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisionesCambio.png"))); // NOI18N
        lab_emisiones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_emisionesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_emisionesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_emisionesMouseExited(evt);
            }
        });

        lab_taxis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxi.png"))); // NOI18N
        lab_taxis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_taxisMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_taxisMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_taxisMouseExited(evt);
            }
        });

        lab_salida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salidaEmergencia.png"))); // NOI18N
        lab_salida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_salidaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_salidaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_salidaMouseExited(evt);
            }
        });

        lab_revicionInterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/revicionInterior.png"))); // NOI18N
        lab_revicionInterior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_revicionInteriorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_revicionInteriorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_revicionInteriorMouseExited(evt);
            }
        });

        lab_revicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/auto.png"))); // NOI18N
        lab_revicion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_revicionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_revicionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_revicionMouseExited(evt);
            }
        });

        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocina.png"))); // NOI18N
        lab_ruido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_ruidoMouseExited(evt);
            }
        });

        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/foco.png"))); // NOI18N
        lab_luces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_lucesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_lucesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_lucesMouseExited(evt);
            }
        });

        lab_ensenanza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ensenanza.png"))); // NOI18N
        lab_ensenanza.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lab_ensenanzaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lab_ensenanzaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lab_ensenanzaMouseExited(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        labl_descripcion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labl_descripcion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labl_descripcion.setToolTipText("Descripcion");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lab_ruido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lab_luces)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lab_revicion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lab_revicionInterior))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lab_salida)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lab_emisiones)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lab_frenos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lab_amortiguadores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lab_taxis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lab_direccion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lab_rines)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lab_ensenanza)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lab_finalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labl_descripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_revicion)
                    .addComponent(jLabel2)
                    .addComponent(lab_revicionInterior))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lab_luces)
                    .addComponent(lab_salida)
                    .addComponent(lab_emisiones)
                    .addComponent(lab_ruido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab_taxis)
                    .addComponent(lab_amortiguadores)
                    .addComponent(lab_frenos)
                    .addComponent(lab_direccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labl_descripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lab_ensenanza)
                    .addComponent(lab_finalizar)
                    .addComponent(lab_rines, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnComentario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/book_24.png"))); // NOI18N
        btnComentario.setText("Comentario");
        btnComentario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnComentarioMouseClicked(evt);
            }
        });
        btnComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComentarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnComentario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lab_lucesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseClicked
        oprimido = nrei.obtener_oprimido();
        //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
        if (oprimido == false && bloquearASeñalizacion == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3.", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable(); //Reiniciar variable de clase a false
        }

        if (oprimido == false && bloquearASeñalizacion == false) {
            FrmLogin obj = new FrmLogin();
            frm_ASenalizacionv2 = new Frm_ASenalizacionv2(obj, true, idPrueba,hojaPruebasActual);
            frm_ASenalizacionv2.setNrei(nrei);
            frm_ASenalizacionv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            bloquearASeñalizacion = true;
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_lucesMouseClicked

    private void lab_lucesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseEntered
        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/focoCambia.png")));
        labl_descripcion.setText("ALUMBRADO Y SEÑAL.");
    }//GEN-LAST:event_lab_lucesMouseEntered

    private void lab_lucesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_lucesMouseExited
        lab_luces.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/foco.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_lucesMouseExited

    private void lab_revicionInteriorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionInteriorMouseClicked
        oprimido = nrei.obtener_oprimido();
        //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
        if (oprimido == false && bloquearRInterior == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3.", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable(); //Reiniciar variable de clase a false            
        }

        if (oprimido == false && bloquearRInterior == false) {
            FrmLogin obj = new FrmLogin();
            frm_RInteriorv2 = new Frm_RInteriorv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_RInteriorv2.setNrei(nrei);
            frm_RInteriorv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            bloquearRInterior = true;
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_revicionInteriorMouseClicked

    private void lab_revicionInteriorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionInteriorMouseEntered
        lab_revicionInterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/revicionInteriorCambio.png")));
        labl_descripcion.setText("REVISIÓN INTERIOR");
    }//GEN-LAST:event_lab_revicionInteriorMouseEntered

    private void lab_revicionInteriorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionInteriorMouseExited
        lab_revicionInterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/revicionInterior.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_revicionInteriorMouseExited

    private void lab_revicionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....

        if (oprimido == false && bloquearRExterior == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearRExterior == false) {

            FrmLogin obj = new FrmLogin();
            frm_RExteriorv1 = new Frm_RExteriorv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba, vehiculo);
//            frm_RExteriorv1 = new Frm_RExteriorv2(obj, true, 2453, 2461, 18113, vehiculo);
            frm_RExteriorv1.setNrei(nrei);//Guardar la referencia del objeto. 
            frm_RExteriorv1.setTitle("Revicion Exterior");
            frm_RExteriorv1.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearRExterior = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_revicionMouseClicked

    private void lab_revicionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionMouseEntered
        lab_revicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/autoCambia.png")));
        labl_descripcion.setText("REVISIÓN EXTERIOR");
    }//GEN-LAST:event_lab_revicionMouseEntered

    private void lab_revicionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_revicionMouseExited
        lab_revicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/auto.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_revicionMouseExited

    private void lab_taxisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxisMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearTaximetro == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
        if (oprimido == false && this.appTaximetro == false) {
            JOptionPane.showMessageDialog(null, "Disculpe El Tipo de Vehiculo no se selecciono Inspeccion Visual como Taximetro..!", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
        }

        if (oprimido == false && bloquearTaximetro == false && this.appTaximetro == true) {

            FrmLogin obj = new FrmLogin();
            frm_Taximetrov2 = new Frm_Taximetrov2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_Taximetrov2.setNrei(nrei);
            frm_Taximetrov2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearTaximetro = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_taxisMouseClicked

    private void lab_taxisMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxisMouseEntered
        lab_taxis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxiCambio.png")));
        labl_descripcion.setText("TAXIMETRO");
    }//GEN-LAST:event_lab_taxisMouseEntered

    private void lab_taxisMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_taxisMouseExited
        lab_taxis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/taxi.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_taxisMouseExited

    private void lab_ruidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseClicked
        oprimido = nrei.obtener_oprimido();
        //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
        if (oprimido == false && bloquearERuido == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable(); //Reiniciar variable de clase a false
        }

        if (oprimido == false && bloquearERuido == false) {
            FrmLogin obj = new FrmLogin();
//            dlg2 = new Frm_ERuido(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
//            dlg2.setNrei(nrei);//Guardar la referencia del objeto.
//            dlg2.setTitle("Frm_IGCentral");
//            dlg2.setVisible(true);
            frm_ERuidov2 = new Frm_ERuidov2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_ERuidov2.setNrei(nrei);
            frm_ERuidov2.setVisible(true);
        }

        if (nrei.obtener_oprimido() == true) {
            bloquearERuido = true;
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_ruidoMouseClicked

    private void lab_ruidoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseEntered
        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocinaCambia.png")));
        labl_descripcion.setText("RUIDO");
    }//GEN-LAST:event_lab_ruidoMouseEntered

    private void lab_ruidoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ruidoMouseExited
        lab_ruido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/bocina.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_ruidoMouseExited

    private void lab_frenosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearSFrenos == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearSFrenos == false) {

            FrmLogin obj = new FrmLogin();
//            dlg6 = new Frm_SFrenos(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
//            dlg6.setNrei(nrei);//Guardar la referencia del objeto.
//            dlg6.setTitle("Frm_IGCentral");
//            dlg6.setVisible(true);
            frm_SFrenosv2 = new Frm_SFrenosv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_SFrenosv2.setNrei(nrei);
            frm_SFrenosv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearSFrenos = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_frenosMouseClicked

    private void lab_frenosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseEntered
        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ruedaCambia.png")));
        labl_descripcion.setText("SISTEMA DE FRENOS");
    }//GEN-LAST:event_lab_frenosMouseEntered

    private void lab_frenosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_frenosMouseExited
        lab_frenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rueda.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_frenosMouseExited

    private void lab_amortiguadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_amortiguadoresMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearSuspension == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        //JOptionPane.showMessageDialog(null, "Oprimido debe estar en false y bloqSusp en false" +oprimido + bloquearSuspension);
        if (oprimido == false && bloquearSuspension == false) {

            FrmLogin obj = new FrmLogin();
//            dlg7 = new Frm_Suspension(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
//            dlg7.setNrei(nrei);//Guardar la referencia del objeto.
//            dlg7.setTitle("Frm_IGCentral");
//            dlg7.setVisible(true);
            frm_Suspensionv2 = new Frm_Suspensionv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_Suspensionv2.setNrei(nrei);
            frm_Suspensionv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearSuspension = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_amortiguadoresMouseClicked

    private void lab_amortiguadoresMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_amortiguadoresMouseEntered
        lab_amortiguadores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguadorCambio.png")));
        labl_descripcion.setText("PRUEBA DE SUSPENSIÓN");
    }//GEN-LAST:event_lab_amortiguadoresMouseEntered

    private void lab_amortiguadoresMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_amortiguadoresMouseExited
        lab_amortiguadores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/amortiguador.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_amortiguadoresMouseExited

    
    
    private void lab_finalizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseClicked
        //JOptionPane.showMessageDialog(null, "Hasta aquí va la ejecución del software:");
//        Frm_Motorv2 validarLabrado= new Frm_Motorv2();
//        if (!validarLabrado.validarValoresMedidas(1.7)) 
//        {
//            JOptionPane.showMessageDialog(this, "Bebe selecionar defecto de profundida de labrado\n Valores por debajo de lo establecido", "Error", JOptionPane.ERROR);
//            return;
//        }
        
        if (bloquearRExterior == false) {
            frm_ERuidov2 = new Frm_ERuidov2();
        }
        if (bloquearRInterior == false) {
            frm_RInteriorv2 = new Frm_RInteriorv2();
        }
        if (bloquearERuido == false) {
            frm_ERuidov2 = new Frm_ERuidov2();
        }
        if (bloquearASeñalizacion == false) {
            frm_ASenalizacionv2 = new Frm_ASenalizacionv2();
        }
        if (bloquearSEmergencia == false) {
            frm_SEmergenciav2 = new Frm_SEmergenciav2();
            //dlg4 = new Frm_SEmergencia();
        }
        if (bloquearEContaminantes == false) {
            frm_EContaminantesv2 = new Frm_EContaminantesv2();
        }
        if (bloquearSFrenos == false) {
            //dlg6 = new Frm_SFrenos();
            frm_SFrenosv2 = new Frm_SFrenosv2();
        }
        if (bloquearSuspension == false) {
            //dlg7 = new Frm_Suspension();
            frm_Suspensionv2 = new Frm_Suspensionv2();
        }
        if (bloquearTaximetro == false) {
//            dlg8 = new Frm_Taximetro();
            frm_Taximetrov2 = new Frm_Taximetrov2();
        }
        if (bloquearDireccion == false) {
            //dlg9 = new Frm_Direccion();
            frm_Direccionv2 = new Frm_Direccionv2();
        }
        if (bloquearMotor == false) {
            //dlg10 = new Frm_Motor();
            frm_Motorv2 = new Frm_Motorv2();
        }

//        JOptionPane.showMessageDialog(null, "PROBLEMAS: \n\n" +dlg.obtenerGrupo() +dlg.obtenerNombreProblema() +"\n"
//                +dlg1.obtenerGrupo() +"\n" +dlg1.obtenerNombreProblema() +"\n" +dlg2.obtenerGrupo() +"\n" +dlg2.obtenerNombreProblema()
//                +(dlg.obtenerCantidadProblemasA() + dlg1.obtenerCantidadProblemasA() + dlg2.obtenerCantidadProblemasA())
//                +"\n" +(dlg.obtenerCantidadProblemasB() + dlg1.obtenerCantidadProblemasB() + dlg2.obtenerCantidadProblemasB()));
        //No mira si pasa o no, pero escribe datos en la BD! (------ CÓDIGO FUNCIONAL -------)
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conexion1 = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Class not found exception", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            //CMensajes.mostrarExcepcion(ex);
        } catch (SQLException ex) {
            //CMensajes.mostrarExcepcion(ex);
            JOptionPane.showMessageDialog(null, "SQL Exception", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
        }
        String serialEquipo = "";
        try {
            serialEquipo = ConsultarDatosVehiculo.buscarSerialEquipo(idPrueba);
            System.out.println(" LECTURA SERIAL:" + serialEquipo);
        } catch (Exception e) {
            System.out.println(" ME CAI CON " + e.getMessage());
            System.out.println(" CAUSA " + e.getCause());
            serialEquipo = "Serial no encontrado";
        }
        try {
            conexion1.setAutoCommit(false);
            String statement = "UPDATE pruebas SET usuario_for = ?, autorizada = 'N', finalizada = 'Y', serialEquipo= ? WHERE id_pruebas = ?;";
            PreparedStatement instruccion = (PreparedStatement) conexion1.prepareStatement(statement);//

            //JOptionPane.showMessageDialog(null, "Marcador1");
            instruccion.setInt(1, idUsuario);
            instruccion.setString(2, serialEquipo);
            instruccion.setInt(3, idPrueba);
            //JOptionPane.showMessageDialog(null, "Id de la prueba " +idPrueba);

            //instruccion.executeUpdate("UPDATE pruebas SET autorizada = 'Y' WHERE id_pruebas = ?;");
            int executeQuery = instruccion.executeUpdate();
//                    executeQuery.first();
//                    cantidadB = executeQuery.getInt(1);
            instruccion.clearParameters();
            //JOptionPane.showMessageDialog(null, "bandera finalizado en 'Y'");
            conexion1.commit();
            conexion1.setAutoCommit(true);
            } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la escritura de datos", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            //CMensajes.mostrarExcepcion(ex);
            }
        
        try {

            String strTotal = "select count(d.Tipo_defecto) from pruebas as pr "
                    + "inner join defxprueba as dp on pr.id_pruebas=dp.id_prueba "
                    + "inner join defectos as d on dp.id_defecto = d.CARDEFAULT "
                    + "INNER JOIN grupos_sub_grupos gsg on gsg.SCDEFGROUPSUB = d.DEFGROUPSSUB\n"
                    + "inner join grupos as g on gsg.DEFGROUP = g.DEFGROUP "
                    + "where pr.id_pruebas in "
                    + "(select max(id_pruebas) from pruebas as p where p.hoja_pruebas_for = ?  AND p.Finalizada = 'Y' group by  p.Tipo_prueba_for ) "
                    + "and  d.Tipo_defecto=? and pr.hoja_pruebas_for = ? and pr.Finalizada = 'Y'";
            java.sql.PreparedStatement consultaTotal = conexion1.prepareStatement(strTotal);
            consultaTotal.setLong(1, hojaPruebasActual);
            consultaTotal.setString(2, "A");
            consultaTotal.setLong(3, hojaPruebasActual);
            rs = null;
            rs = consultaTotal.executeQuery();
            rs.first();
            int totalDefA = rs.getInt(1);

            consultaTotal.clearParameters();          
            //System.out.println("Datos enviados");
            //JOptionPane.showMessageDialog(null, "slkd" +idprueba);
            String strIVEval = "UPDATE pruebas SET Aprobada = ? where Id_Pruebas = ?";
            java.sql.PreparedStatement psEvalIV = conexion1.prepareStatement(strIVEval);
            if (totalDefA > 0 ) {//solo desaprueba la Inspeccion Sensorial si encuentra defectos tipo A o en el peor caso de defectos tipo B
                psEvalIV.setString(1, "N");
            } else {
                psEvalIV.setString(1, "Y");
            }
            psEvalIV.setLong(2, idPrueba);
            int pruebasEjecutadas = psEvalIV.executeUpdate();
            System.out.println("Pruebas de IV Actualizadas: " + pruebasEjecutadas);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error en la escritura de datos", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            //CMensajes.mostrarExcepcion(ex);
        } //(------ HASTA AQUÍ VA EL CÓDIGO PARA DANIAR!!!!!!!!!!!-------)
        finally {
            try {
                conexion1.close();
            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }

//        //conexion1 conexion
////hojaPruebas...
//        try{
//            String strIVTipoA = "select count(d.Tipo_defecto) from pruebas as pr "
//            + "inner join defxprueba as dp on pr.id_pruebas=dp.id_prueba "
//            + "inner join defectos as d on dp.id_defecto = d.CARDEFAULT "
//            + "where pr.id_pruebas = "
//            + "(select max(id_pruebas) from pruebas as p where p.hoja_pruebas_for = ? and p.Tipo_prueba_for =1 and p.Finalizada = 'Y') "
//            + " and d.Tipo_defecto=?";
//            PreparedStatement psDefectosVisual = (PreparedStatement) conexion1.prepareStatement(strIVTipoA);
//            psDefectosVisual.setLong(1,hojaPruebasActual);
//            psDefectosVisual.setString(2,"A");
//            rs = null;
//            rs = psDefectosVisual.executeQuery();
//            rs.next();
//            int defectosA = rs.getInt(1);
//            psDefectosVisual.clearParameters();
//            psDefectosVisual.setLong(1,hojaPruebasActual);
//            psDefectosVisual.setString(2,"B");
//
//            rs = null;
//            rs = psDefectosVisual.executeQuery();
//            rs.next();
//            int defectosB = rs.getInt(1);
//
//            //JOptionPane.showMessageDialog(null,"Defectos A: " + defectosA +"\n Defectos B:" + defectosB);
//            //Consultar el numero de la prueba
//
//            String strNumPrueba = "select max(id_pruebas) from pruebas as p where p.hoja_pruebas_for = ? and p.Tipo_prueba_for =1 and p.Finalizada = 'Y'";
//            PreparedStatement psNumPrueba = (PreparedStatement) conexion1.prepareStatement(strNumPrueba);
//            psNumPrueba.setLong(1,hojaPruebasActual);
//            rs = null;
//            rs = psNumPrueba.executeQuery();
//            rs.next();
//            long numeroPruebaIV = rs.getLong(1);
//            String strIVEval = "UPDATE pruebas SET Aprobada = ? where Id_Pruebas = ?";
//            PreparedStatement psEvalIV = (PreparedStatement) conexion1.prepareStatement(strIVEval);
//            if(defectosA > 0){//solo desaprueba la Inspeccion Sensorial si encuentra defectos tipo A
//                psEvalIV.setString(1,"N");
//            }if(defectosA == 0 && defectosB < 10){
//                psEvalIV.setString(1,"Y");
//            }if(defectosB >= 10){
//                psEvalIV.setString(1,"N");
//            }
//            psEvalIV.setLong(2,numeroPruebaIV);
//            int pruebasEjecutadas = psEvalIV.executeUpdate();
//            System.out.println("Pruebas de IV Actualizadas: " + pruebasEjecutadas);
//
//
//     }catch (SQLException ex) {
//                 ex.printStackTrace();
//                 JOptionPane.showMessageDialog(null, "Error en la escritura de datos", "ERROR", JOptionPane.ERROR_MESSAGE);
//                 //CMensajes.mostrarExcepcion(ex);
//     }
        
            /*
            *
            * Codigo de Diego Garzon seriales en el fur 
            *
            */
            //Pruebas prueba = new Pruebas();
            //prueba.setIdPruebas(idPrueba);
            /*hojaPruebasController = new HojaPruebasJpaController();
            hojaPruebas = hojaPruebasController.findHojaPruebas(hojaPruebasActual);
            System.out.println("\n"+hojaPruebas+"\n");
            PruebasJpaController controller = new PruebasJpaController();      
            Pruebas pruebaedit = null;
            for (Pruebas prueba : hojaPruebas.getPruebasCollection()) {
                
                
                    prueba.setIdPruebas(idPrueba);
                    System.out.println("\n"+idPrueba+" Este es el Ide de Prueba"+"\n");
                    System.out.println("\n"+hojaPruebas+"\n");
                    if (prueba.getTipoPrueba().getTesttype() == 1) {   
                        prueba.setObservaciones(prueba.getObservaciones().concat("obs")
                                .concat("\nSerial Profundimetro: ")
                                .concat(serialEquipo).concat("\n"));
                    }
                
            }*/
        doClose(0);
    }//GEN-LAST:event_lab_finalizarMouseClicked
    
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    private void lab_finalizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseEntered
        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/finCambia.png")));
        labl_descripcion.setText("FINALIZAR PRUEBA");
    }//GEN-LAST:event_lab_finalizarMouseEntered

    private void lab_finalizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_finalizarMouseExited
        lab_finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/fin.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_finalizarMouseExited

    private void lab_direccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_direccionMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearDireccion == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearDireccion == false) {

            FrmLogin obj = new FrmLogin();
//            dlg9 = new Frm_Direccion(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
//            dlg9.setNrei(nrei);//Guardar la referencia del objeto.
//            dlg9.setTitle("Frm_IGCentral");
//            dlg9.setVisible(true);
            frm_Direccionv2 = new Frm_Direccionv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_Direccionv2.setNrei(nrei);
            frm_Direccionv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearDireccion = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_direccionMouseClicked

    private void lab_direccionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_direccionMouseEntered
        lab_direccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/direccionCambio.png")));
        labl_descripcion.setText("PRUEBA DE DIRECCIÓN");
    }//GEN-LAST:event_lab_direccionMouseEntered

    private void lab_direccionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_direccionMouseExited
        lab_direccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/direccion.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_direccionMouseExited

    private void lab_rinesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_rinesMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearMotor == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya fue APLICADA ..!", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearMotor == false) {
            FrmLogin obj = new FrmLogin();
            frm_Motorv2 = new Frm_Motorv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba,vehiculo.getPesoBruto());
            frm_Motorv2.setNrei(nrei);
            frm_Motorv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearMotor = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_rinesMouseClicked

    private void lab_rinesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_rinesMouseEntered
        lab_rines.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rinesCambio.png")));
        labl_descripcion.setText("<html><center>RINES/LLANTAS <br/>- MOTOR<br/> - SIST. COMBUSTIBLE <br/> TRANSIMISIÓN</center></html>");
    }//GEN-LAST:event_lab_rinesMouseEntered

    private void lab_rinesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_rinesMouseExited
        lab_rines.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rines.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_rinesMouseExited

    private void lab_emisionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_emisionesMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearEContaminantes == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearEContaminantes == false) {

            FrmLogin obj = new FrmLogin();

            frm_EContaminantesv2 = new Frm_EContaminantesv2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_EContaminantesv2.setNrei(nrei);
            frm_EContaminantesv2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearEContaminantes = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton

        }
    }//GEN-LAST:event_lab_emisionesMouseClicked

    private void lab_emisionesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_emisionesMouseEntered
        lab_emisiones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisiones.png")));
        labl_descripcion.setText("EMISIONES ");
    }//GEN-LAST:event_lab_emisionesMouseEntered

    private void lab_emisionesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_emisionesMouseExited
        lab_emisiones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/emisionesCambio.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_emisionesMouseExited

    private void lab_salidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_salidaMouseClicked
        oprimido = nrei.obtener_oprimido(); //variable para obtener el bool pero no sirve....
        //JOptionPane.showMessageDialog(null, "La variable oprimido es igual a: " +oprimido);

        if (oprimido == false && bloquearSEmergencia == true) {
            JOptionPane.showMessageDialog(null, "Esta prueba ya se ha realizado..", "SART 1.7.3", JOptionPane.ERROR_MESSAGE);
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }

        if (oprimido == false && bloquearSEmergencia == false) {

            FrmLogin obj = new FrmLogin();
//            dlg4 = new Frm_SEmergencia(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
//            dlg4.setNrei(nrei);//Guardar la referencia del objeto.
//            dlg4.setTitle("Frm_IGCentral");
//            dlg4.setVisible(true);
            frm_SEmergenciav2 = new Frm_SEmergenciav2(obj, true, idVehiculo, hojaPruebasActual, idPrueba);
            frm_SEmergenciav2.setNrei(nrei);
            frm_SEmergenciav2.setVisible(true);
        }
        if (nrei.obtener_oprimido() == true) {
            //JOptionPane.showMessageDialog(null, "OBtener oprimido = " +nrei.obtener_oprimido());
            bloquearSEmergencia = true;
            nrei.reiniciarVariable();//Reiniciar variable de clase para que quede preparada para comprobar otro boton
        }
    }//GEN-LAST:event_lab_salidaMouseClicked

    private void lab_salidaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_salidaMouseEntered
        lab_salida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salidaEmergenciaCambio.png")));
        labl_descripcion.setText("SAL. DE EMERGENCIA");
    }//GEN-LAST:event_lab_salidaMouseEntered

    private void lab_salidaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_salidaMouseExited
        lab_salida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salidaEmergencia.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_salidaMouseExited

    private void lab_ensenanzaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ensenanzaMouseClicked
        if (isEnsenianza) {
            Window w = SwingUtilities.getWindowAncestor(this);
//        Frm_Ensen frm_Ensen = new Frm_Ensen((Frame) w, true, idPrueba);
//        frm_Ensen.setVisible(true);
            Frm_Ensenv2 frm_Ensenv2 = new Frm_Ensenv2((Frame) w, true, idPrueba);
            frm_Ensenv2.setVisible(true);
            lab_ensenanza.setEnabled(false);
        }
    }//GEN-LAST:event_lab_ensenanzaMouseClicked

    private void lab_ensenanzaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ensenanzaMouseEntered

        lab_ensenanza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ensenanzaCambio.png")));

        labl_descripcion.setText("ENSEÑANZA");
    }//GEN-LAST:event_lab_ensenanzaMouseEntered

    private void lab_ensenanzaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lab_ensenanzaMouseExited
        lab_ensenanza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/ensenanza.png")));
        labl_descripcion.setText(null);
    }//GEN-LAST:event_lab_ensenanzaMouseExited

    private void btnComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComentarioActionPerformed
        hojaPruebasController = new HojaPruebasJpaController();
        hojaPruebas = hojaPruebasController.findHojaPruebas(hojaPruebasActual);
        ControladorVerificar controladorVerificar = new ControladorVerificar();
        String txtObs = controladorVerificar.exisObsCrud(this.idPrueba, em);
        String[] lstObs = txtObs.split("obs");
        if(lstObs.length>1){ 
            txtComentario.setText(lstObs[1]); 
        }
        txtProfLabrado=lstObs[0];
        dlgComentario.setVisible(true);
        dlgComentario.setLocationRelativeTo(null);
    }//GEN-LAST:event_btnComentarioActionPerformed

    private void btnSaveCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCommentActionPerformed
        PruebasJpaController controller = new PruebasJpaController(); 
        Pruebas pruebaedit = null;
        for (Pruebas prueba : hojaPruebas.getPruebasCollection()) {
            System.out.println("\n"+prueba+"\n");
            if (prueba.getTipoPrueba().getTesttype() == 1) {
                prueba.setObservaciones(txtProfLabrado);
                if (prueba.getObservaciones() != null) {
                    prueba.setObservaciones(prueba.getObservaciones().concat("obs").concat(txtComentario.getText()));
                } else {
                    prueba.setObservaciones("obs".concat(txtComentario.getText()));
                }
                pruebaedit = prueba;
            }
        }
        try {
            controller.edit(pruebaedit);
            Mensajes.mensajeCorrecto("Se Almaceno  el comentario con Exito ..¡");
        } catch (IllegalOrphanException ex) {
            Mensajes.mensajeError("No se logro guardar el comentario");
            Mensajes.mostrarExcepcion(ex);
        } catch (NonexistentEntityException ex) {
            Mensajes.mensajeError("No se logro guardar el comentario");
            Mensajes.mostrarExcepcion(ex);
        } catch (Exception ex) {
            Mensajes.mensajeError("No se logro guardar el comentario");
            Mensajes.mostrarExcepcion(ex);
        }
        dlgComentario.dispose();
    }//GEN-LAST:event_btnSaveCommentActionPerformed
  
    private void btnCancelCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelCommentActionPerformed
        dlgComentario.dispose();
    }//GEN-LAST:event_btnCancelCommentActionPerformed

    private void btnComentarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnComentarioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnComentarioMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelComment;
    private javax.swing.JButton btnComentario;
    private javax.swing.JButton btnSaveComment;
    private javax.swing.JDialog dlgComentario;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lab_amortiguadores;
    private javax.swing.JLabel lab_direccion;
    private javax.swing.JLabel lab_emisiones;
    private javax.swing.JLabel lab_ensenanza;
    private javax.swing.JLabel lab_finalizar;
    private javax.swing.JLabel lab_frenos;
    private javax.swing.JLabel lab_luces;
    private javax.swing.JLabel lab_revicion;
    private javax.swing.JLabel lab_revicionInterior;
    private javax.swing.JLabel lab_rines;
    private javax.swing.JLabel lab_ruido;
    private javax.swing.JLabel lab_salida;
    private javax.swing.JLabel lab_taxis;
    private javax.swing.JLabel labl_descripcion;
    private javax.swing.JTextArea txtComentario;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0; //Variable de retorno para el boton cancelar.

    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(Frm_InspeccionVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_InspeccionVisual dialog = new Frm_InspeccionVisual(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
}
