/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_moca_AExteriorv2 extends javax.swing.JDialog {

    final int alta = 100;
    final int baja = 1;
    private int defecto;
    private int contadorA = 0;
    private int contadorB = 0;
    private String cadenaRExterior = "\n";
    private String grupo = "";
    private boolean aprobado = true;
    //AGREGAR A LA CADENA EL TITULO DEL GRUPO CORRESPONDIENTE, esto por que hay varios grupos en una misma ventana
    private boolean carroceriaEstablecido = false;
    private boolean vidriosEstablecido = false;
    private boolean retrovisorEstablecido = false;
    private boolean soporteEstablecido = false;
    private boolean dispositivosEstablecido = false;
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    //-------------

    
        public Frm_moca_AExteriorv2() {
        cargarConexion();
    }
    
    




    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }
    //////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO/////////
    /**
     * Creates new form Frm_moca_AExterior
     */
    public Frm_moca_AExteriorv2(java.awt.Frame parent, boolean modal, int idVehiculo,
            int hojaPruebasActual, int idPrueba) {
        super(parent, modal);
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;        
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        cargarConexion();
    }
    /**
     * Creates new form Frm_moca_AExteriorv2
     */
    public Frm_moca_AExteriorv2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        cargarConexion();
    }
    
    
    
         private void cargarConexion() 
    {
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
    }
         
         
         
              private boolean insertarDefectosDb(String query,int codigo,int  idPrueba) 
    {
        try 
        {
            conexion.setAutoCommit(false);
            PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(query);
            instruccion.setInt(1, codigo);
            instruccion.setInt(2, idPrueba);
            instruccion.executeUpdate();
            instruccion.clearParameters();
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Se registra defecto : " + codigo + " correctamente ");
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            return true;
        } catch (SQLException ex) 
        {
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Error fatal al registrar defecto : " + codigo);
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            Logger.getLogger(Frm_moca_AExteriorv2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox27 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox26 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox28 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jCheckBox18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox18.setText("Inexistencia o mal funcionamiento de los limpiaparabrisas delanteros");

        jCheckBox17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox17.setText("La inexistencia o mal funcionamiento de los mecanismos de accionamiento de alguno de los vidriso móviles.");

        jCheckBox16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox16.setText("<html>La existencia de fisuras, impactos láminas adheridas, publicidad y/o adhesivos al (a los parabrisa(s) delantero(s),<br/> que dificulten el campo de visión del conductor.</html>");

        jCheckBox15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox15.setText("Inexistencia de algún vidrio fijo diferente a los parabrisas.");

        jCheckBox14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox14.setText("Inexistencia de alguno de los parabrisas o de los vidrios móviles.");

        jCheckBox13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox13.setText("Vidrios que distorsionan y/o deforman el campo mínimo de visión del conductor.");
        jCheckBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15)
                    .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox17)
                    .addComponent(jCheckBox18))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox18)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vidrios", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/resize_24.png")), jPanel1); // NOI18N

        jCheckBox23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox23.setText("Mal estado de los anclajes y demás elementos para sujetar la carga cuando sea aplicable");

        jCheckBox24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox24.setText("La inexistencia o mal funcionamiento de puertas o compuertas de carga para vehículos con platón, estacas o furgones");

        jCheckBox25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox25.setText("<html>Puertas o compuertas de carga que no dispongan de los cierres adecuados para impedir que<br/> estas se abran por las fuerzas normales que actúan en su movilizaición</html>");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox23)
                    .addComponent(jCheckBox24)
                    .addComponent(jCheckBox25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(257, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dispositivo de retención de la carga", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/moving_24.png")), jPanel2); // NOI18N

        jCheckBox19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox19.setText("La inexistencia de cualquiera de los dos espejos retrovisores funcionales");

        jCheckBox20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox20.setText("Mal estado o fijación deficiente del(los) retrovisor(es)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20))
                .addContainerGap(288, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox20)
                .addContainerGap(296, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Retrovisores", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/comment_minus_24.png")), jPanel3); // NOI18N

        jCheckBox21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox21.setText("Soporte de fijación roto o alguno de sus anclajes");

        jCheckBox22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox22.setText("Holgura con riesgo de desprendimiento de la rueda de repuesto");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox21)
                    .addComponent(jCheckBox22))
                .addContainerGap(336, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox22)
                .addContainerGap(296, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Soporte exterior de rueda de repuesto", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/video_rec_24.png")), jPanel4); // NOI18N

        jCheckBox27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox27.setText("El no funcionamiento o inexistencia de la bocina, pito o dispositivo acústico");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox27)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox27)
                .addContainerGap(319, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Bocina, pito o dispositivo acústico", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/speaker_24.png")), jPanel5); // NOI18N

        jCheckBox26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox26.setText("Existencia de algún tipo de dispositivo o accesorio diseñado para producir ruido o motocarros sin silenciador");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox26)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox26)
                .addContainerGap(319, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Dispositivos de ruido no permitidos", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/sound_24.png")), jPanel6); // NOI18N

        jPanel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCheckBox12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox12.setText("Parachoques y defensas, en mal estado");

        jCheckBox9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox9.setText("Roturas, perforaciones, desacople o inexistencia del sistema de escape");

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox1.setText("Presencia de aristas vivas  o bordes cortantes exteriores en el vehículo");

        jCheckBox10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox10.setText("Presencia de fisuras, cortes, dobleces o corrosión de los largueros y travesaños del chasis");

        jCheckBox7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox7.setText("Corrosión o mal estado de la carrocería");

        jCheckBox6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox6.setText("Roce o interferencia entre las llantas y el guardabarros, carrocería o suspensión");

        jCheckBox8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox8.setText("Perforaciones que permitan la entrada de agua, gases o en el habitáculo de pasajeros cuando aplique");

        jCheckBox3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox3.setText("Cierre inadecuado de compuertas de carga o de bodega cuando aplique");

        jCheckBox2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox2.setText("Cierre inadecuado de puertas, y/o tapa motor cuando aplique");

        jCheckBox5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox5.setText("Mal estado de los elementos de sujeción de la carrocería al chasis");

        jCheckBox4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox4.setText("<html>Partes exteriores de la carrocería o cabina en mal estado (flojas, sueltas), que presenten <br/>peligro para los demás usuarios de la vía. </html>");

        jCheckBox28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox28.setText("Mal estado de parachoques y/o defensas.");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox28))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox28)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Carrocería, exterior y chasis", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/1334257877_muscle_car.png")), jPanel7); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/solt.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>ACONDICIONAMIENTO EXTERIOR <br/> VIDRIOS - RETROVISORES <br/> SOPORTE EXTERIOR DE RUEDA <br/> BOCINA / PITO</center></html>");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/revicionInterior.png"))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        cancelar.setText("cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
         boolean persistir = false;

                  
        
        if (jCheckBox1.isSelected()) 
        { String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15000, idPrueba);
            
        }
        if (jCheckBox2.isSelected()) 
        { String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15001, idPrueba);
            
        }
         if (jCheckBox3.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15002, idPrueba);
         }

         if (jCheckBox4.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15003, idPrueba);
         }
         if (jCheckBox5.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15004, idPrueba);
         }
         if (jCheckBox6.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15005, idPrueba);
         }
         if (jCheckBox7.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15006, idPrueba);
         }
         if (jCheckBox8.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15007, idPrueba);
         }
         if (jCheckBox9.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15008, idPrueba);
         }
         if (jCheckBox10.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15009, idPrueba);
         }

         if (jCheckBox12.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15011, idPrueba);
         }
         if (jCheckBox13.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15012, idPrueba);
         }
         if (jCheckBox14.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15013, idPrueba);
         }
         if (jCheckBox15.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15014, idPrueba);
         }
         if (jCheckBox16.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15015, idPrueba);
         }
         if (jCheckBox17.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15016, idPrueba);
         }
         if (jCheckBox18.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15017, idPrueba);
         }
         if (jCheckBox19.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15018, idPrueba);
         }
         if (jCheckBox20.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15019, idPrueba);
         }
         if (jCheckBox21.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15020, idPrueba);
         }
         if (jCheckBox22.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15021, idPrueba);
         }
         if (jCheckBox23.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15022, idPrueba);
         }
         if (jCheckBox24.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15023, idPrueba);
         }
         if (jCheckBox25.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15024, idPrueba);
         }
         if (jCheckBox26.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15033, idPrueba);
         }
         if (jCheckBox27.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15056, idPrueba);
         }
         if (jCheckBox28.isSelected()) {
             String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                persistir = insertarDefectosDb(statement, 15055, idPrueba);
         }
         
         
      /*   
         
        if (jCheckBox28.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15055);
                System.out.println("inserto defecto : 15055");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
//2*3.23
        if (jCheckBox2.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15001);
                System.out.println("inserto defecto : 15001");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox3.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15002);
                                System.out.println("inserto defecto : 15002");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox4.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15003);
                                System.out.println("inserto defecto : 15003 ");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox5.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15004);
                                System.out.println("inserto defecto : 15004");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
              persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox6.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15005);
                                System.out.println("inserto defecto : 15005");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox7.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15006);
                                System.out.println("inserto defecto : 15006");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox8.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15007);
                                System.out.println("inserto defecto : 15007");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox9.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15008);
                                System.out.println("inserto defecto : 15008");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox10.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15009);
                                System.out.println("inserto defecto : 15009");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
               persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox11.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15010);
                                System.out.println("inserto defecto : 15010");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox12.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15011);
                                System.out.println("inserto defecto : 15011");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox13.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15012);
                System.out.println("Inserto defecto 15012");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox14.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15013);
                                System.out.println("inserto defecto : 15013");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox15.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15014);
                                System.out.println("inserto defecto : 15014");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox16.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15015);
                                System.out.println("inserto defecto : 15015");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox17.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15016);
                                System.out.println("inserto defecto : 15016");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox18.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15017);
                                System.out.println("inserto defecto : 15017");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox19.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15018);
                                System.out.println("inserto defecto : 15018");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox20.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15019);
                                System.out.println("inserto defecto : 15019");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox21.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15020);
                                System.out.println("inserto defecto : 15020");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox22.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15021);
                                System.out.println("inserto defecto : 15021");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox23.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15022);
                                System.out.println("inserto defecto : 15022");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox24.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15023);
                                System.out.println("inserto defecto : 15023");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;                
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox25.isSelected()) {

            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15024);
                                System.out.println("inserto defecto : 15024");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                 persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox26.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }

            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15033);
                                System.out.println("inserto defecto : 15033");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }

        if (jCheckBox27.isSelected()) {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":"+Conexion.getPuerto() +  "/"+ Conexion.getBaseDatos() , Conexion.getUsuario(),Conexion.getContraseña());
                //JOptionPane.showMessageDialog(null, "2-Después del clas.forName y conexion con dir ip, usuario y passw");
            } catch (ClassNotFoundException | SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
            try {
                conexion.setAutoCommit(false);
                String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
                PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(statement);
                instruccion.setInt(1, 15056);
                                System.out.println("inserto defecto : 15056");
                instruccion.setInt(2, idPrueba);
                instruccion.executeUpdate();
                instruccion.clearParameters();
                persistir = true;
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }
        if (persistir == true) {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos  de una Manera Exitosa ", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Mensajes.mostrarExcepcion(ex);
            }
        }*/

        doClose(0);
        if (persistir == true) 
        {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos de una Manera Exitosa ", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                Logger.getLogger(Frm_moca_AExteriorv2.class.getName()).log(Level.SEVERE, null, e);
                Mensajes.mostrarExcepcion(e);
            }
           
        }
        nrei.establecer_oprimido(true);
    }//GEN-LAST:event_guardarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        doClose(returnStatus);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jCheckBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox13ActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_moca_AExteriorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Frm_moca_AExteriorv2 dialog = new Frm_moca_AExteriorv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
