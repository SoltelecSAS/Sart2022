/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.soltelec.igrafica;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.soltelec.modulopuc.configuracion.modelo.Conexion;
import com.soltelec.modulopuc.utilidades.Mensajes;
import com.soltelec.util.UtilPropiedadesSart;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author GerenciaDesarrollo
 */
public class Frm_Motorv2 extends javax.swing.JDialog {

    final int numeroProblemas = 32;
    final int alta = 100;
    final int baja = 1;
    private int defecto;
    private int contadorA = 0;
    private int contadorB = 0;
    private String cadenaRExterior = "\n";
    private String grupo = "";
    private boolean aprobado = true;
    private boolean motorEstablecido = false;
    private boolean transmisionEstablecido = false;
    private boolean llantasEstablecido = false;
    private int idVehiculo;
    private int hojaPruebasActual;
    private int idPrueba;
    //---Conexión por JDBC
    private Connection conexion;
    private String usuario;
    private String password;
    private String direccionIP;
    private  boolean selecionado23;
    private  boolean selecionado24;
    private static double permisibleLabrado=0.0;
    private int pesoBurto=0;
    private int limitPesoBurto=0;
    //DIRECCIÓN IP DEL SERVIDOR = 186.112.176.34
    ////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO///////////
    NoReiniciable nrei;

    Frm_Motorv2() 
    {        
       cargarConexion();
    }

    public NoReiniciable getNrei() {
        return nrei;
    }

    public void setNrei(NoReiniciable nrei) {
        this.nrei = nrei;
    }
    //////////////////////////////////////////////PARA NO PERDER LA REFERENCIA DEL OBJETO/////////

    /**
     * Creates new form Frm_Motor
     */
    public Frm_Motorv2(java.awt.Frame parent, boolean modal, int idVehiculo,int hojaPruebasActual, int idPrueba, int pesoBruto) {
        
        super(parent, modal);
//        cargarConfigLabrado();
        this.idVehiculo = idVehiculo;
        this.hojaPruebasActual = hojaPruebasActual;
        this.idPrueba = idPrueba;
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        this.pesoBurto=pesoBruto;
        cargarConexion();
        cargarConfigLabrado();
    }
    
    /**
     * Metodo que permite cargar los valores de permisibles 
     * para cuando se presenta profundidad de labrado para livianos
     */
    private void cargarConfigLabrado()
    {
        try 
        {
            Map map = UtilPropiedadesSart.cargarConfigLabrado("configuracion/ConfiPermisLabrado.properties");
            if (!map.isEmpty()) 
            {
                if (map.containsKey("limitPesoBruto")){
                    String limitPesoBruto=map.get("limitPesoBruto").toString();
                    limitPesoBurto=Integer.parseInt(limitPesoBruto);
                }
                if (this.pesoBurto < limitPesoBurto) 
                {
                    if (map.containsKey("PermisibleMenor3500"))
                    {
                        String PermibleMenor3500=map.get("PermisibleMenor3500").toString();
                        permisibleLabrado =Double.parseDouble(PermibleMenor3500);
                        this.jCheckBox24.setVisible(false);
                    }
                } else {
                    if (map.containsKey("PermisibleMayor3500")) 
                    {
                        String PermisibleMayor3500=map.get("PermisibleMayor3500").toString();
                        permisibleLabrado = Double.parseDouble(PermisibleMayor3500);
                        this.jCheckBox23.setVisible(false);
                    }
                }
            }
        } catch (Exception e) 
        {
            System.out.println("Error en el metodo : cargarConfigLabrado()");
            Mensajes.mostrarExcepcion(e);
        }
    }
    
    
    
    public Frm_Motorv2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);
        setResizable(false);
        cargarConexion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        guardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rines/llantas - motor sistema de combustible transmisión");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCheckBox1.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox1.setText("Perdidas de aceite sin goteo continuo");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox2.setText("Perdidas de aceite con goteo continuo");

        jCheckBox3.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox3.setText("Mal estado, mala distribución y/o sujeción de cualquier componente del sistema eléctrico");

        jCheckBox4.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox4.setText("Batería con soporte suelto o con riesgo de desprendimiento.");

        jCheckBox5.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox5.setText("Fugas en el sistema de refrigeración.");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Motor", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/gear_24.png")), jPanel7); // NOI18N

        jCheckBox6.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox6.setText("<html>Mala fijación, deterioro excesivo, fugas, riesgo de desprendimiento del depósito <br/>y de los conductos del combustible.</html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sistema de combustible", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/tray_24.png")), jPanel1); // NOI18N

        jPanel2.setAutoscrolls(true);

        jCheckBox12.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox12.setText("Falta de una o más tuercas, espárragos, tornillos, o pernos en cualquier rueda del carro");

        jCheckBox13.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox13.setText("Deformaciones excesivas en cualquiera de los rines");

        jCheckBox14.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox14.setText("Fisuras en cualquiera de los rines.");

        jCheckBox15.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox15.setText("Inexistencia de algún rin o llanta, en los vehículos que usan más de dos ruedas por eje.");

        jCheckBox19.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox19.setText("Deterioro, deformaciones, fisuras o riesgo de desprendimiento en los aros de los rines artilleros.");

        jCheckBox16.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox16.setText("Inexistencia de la llanta de repuesto, o inadecuado estado para su servicio, cuando aplique");

        jCheckBox22.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox22.setText("Despegue o rotura en las bandas laterales de una o más llantas.");

        jCheckBox20.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox20.setText("Protuberancias, deformaciones, despegue o rotura en la banda de rodamiento de una o más llantas");
        jCheckBox20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox20ActionPerformed(evt);
            }
        });

        jCheckBox21.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox21.setText("<html>En cualquiera de las llantas con banda de rodamiento regrabadas, a excepción <br/>cuando es permitido por el fabricante</html>");
        jCheckBox21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox21ActionPerformed(evt);
            }
        });

        jCheckBox23.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox23.setText("<html>Profundidad de labrado en el área de mayor desgaste de cualquiera de las llantas de servicio, menor a 1.6 mm</br> o inferior a las marcas de desgaste especificadas por los fabricantes. Es aplicable a vehículos con  peso bruto vehicular hasta 3500kg.</html>");
        jCheckBox23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckBox23MousePressed(evt);
            }
        });
        jCheckBox23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox23ActionPerformed(evt);
            }
        });

        jCheckBox24.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox24.setText("<html>Profundidad de labrado en el área de mayor desgaste de cualquiera de las llantas de servicio, menor a 2 mm </br> o inferior a las marcas de desgaste especificadas por los fabricantes. Es aplicable a vehículos con  peso bruto vehicular  igual o mayor a 3500 kg.</html> ");
        jCheckBox24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jCheckBox24MousePressed(evt);
            }
        });
        jCheckBox24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox16)
                    .addComponent(jCheckBox22)
                    .addComponent(jCheckBox20)
                    .addComponent(jCheckBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox23, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
                    .addComponent(jCheckBox24, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(1830, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox19)
                .addGap(12, 12, 12)
                .addComponent(jCheckBox16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox23, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox24, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Rines y llantas", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/video_rec_24.png")), jPanel2); // NOI18N

        jCheckBox7.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox7.setText("Juegos mecánicos (holguras) excesivos en las juntas del cardán");

        jCheckBox8.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox8.setText("Perdidas de aceite sin goteo continuo en la transmisión o caja");

        jCheckBox9.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox9.setText("Perdidas de aceite con goteo continuo en la transmisión o caja");

        jCheckBox10.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox10.setText("Existencia de holguras excesivas en los elementos de la transmisión");

        jCheckBox11.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        jCheckBox11.setText("Inexistencia de protector para desprendimiento del cardan trasero");
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox11)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transmision", new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/video_pause_24.png")), jPanel4); // NOI18N

        jLabel2.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("<html><center>RINES/LLANTAS - MOTOR <br/> SISTEMA DE COMBUSTIBLE <br/> TRANSMISIÓN</center></html>");

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/save_24.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/rines.png"))); // NOI18N

        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soltelec/Icon/salir24.png"))); // NOI18N
        cancelar.setText("cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que permite conectar con la db
     */
    private void cargarConexion() 
    {
        try 
        {
            Class.forName("com.mysql.jdbc.Driver");
            conexion = (Connection) DriverManager.getConnection("jdbc:mysql://" + Conexion.getIpServidor() + ":" + Conexion.getPuerto() + "/" + Conexion.getBaseDatos(), Conexion.getUsuario(), Conexion.getContraseña());
        } catch (ClassNotFoundException | SQLException ex) {
            Mensajes.mostrarExcepcion(ex);
        }
    }

    /**
     * Metodo que permite insertar defectos
     * 
     * @param query
     * @param codigo
     * @param idPrueba
     * @return 
     */
    private boolean insertarDefectosDb(String query,int codigo,int  idPrueba) 
    {
        try 
        {
            conexion.setAutoCommit(false);
            PreparedStatement instruccion = (PreparedStatement) conexion.prepareStatement(query);
            instruccion.setInt(1, codigo);
            instruccion.setInt(2, idPrueba);
            instruccion.executeUpdate();
            instruccion.clearParameters();
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Se registra defecto : " + codigo + " correctamente ");
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            return true;
        } catch (SQLException ex) 
        {
            System.out.println("");
            System.out.println(" - " + query);
            System.out.println(" - Error fatal al registrar defecto : " + codigo);
            System.out.println(" - idPrueba : " + idPrueba);
            System.out.println("");
            Logger.getLogger(Frm_Motorv2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    
    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        
        boolean persistir = false;
        String statement = "INSERT INTO db_cda.defxprueba(id_defecto,id_prueba) VALUES(?,?)";
        
        if (jCheckBox23.isVisible()) 
        {
            if (jCheckBox23.isSelected()) 
            {
                persistir = insertarDefectosDb(statement, 10094, idPrueba);
            } else {
                if (!validarValoresMedidas(permisibleLabrado)) 
                {
                    JOptionPane.showMessageDialog(null, "Selecione defectos de labrado , valores inconsistentes", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }

       if (jCheckBox24.isVisible()) 
        {
            if (jCheckBox24.isSelected()) {
                persistir = insertarDefectosDb(statement, 10095, idPrueba);
                System.out.println("se inserta defecto 10095");
            } else {
                if (!validarValoresMedidas(permisibleLabrado)) {
                    JOptionPane.showMessageDialog(null, "Selecione defectos de labrado, valores inconsistentes", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }
            
            
          //  if(jCheckBox16.isVisible()){
            if (jCheckBox16.isSelected()) {
                persistir = insertarDefectosDb(statement, 10096, idPrueba);
            } else {
                if (!validarMedidasLabradoRepuesto(permisibleLabrado,idPrueba )) {
                    System.out.println("entra a la opcion de false");
                    JOptionPane.showMessageDialog(null, "Selecione defectos de labrado en la llanta de repuesto", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
           // }
            
            
            
            
            
      //  }
        
        if (jCheckBox1.isSelected()) 
            persistir=insertarDefectosDb(statement,10100,idPrueba);

        if (jCheckBox2.isSelected()) 
            persistir=insertarDefectosDb(statement,10101,idPrueba);

        if (jCheckBox3.isSelected()) 
            persistir=insertarDefectosDb(statement,10102,idPrueba);

        if (jCheckBox4.isSelected()) 
            persistir=insertarDefectosDb(statement,10103,idPrueba);

        if (jCheckBox5.isSelected()) 
            persistir=insertarDefectosDb(statement,14021,idPrueba);

        if (jCheckBox6.isSelected()) 
            persistir=insertarDefectosDb(statement,10105,idPrueba);
        
        if (jCheckBox7.isSelected()) 
            persistir=insertarDefectosDb(statement,10106,idPrueba);

        if (jCheckBox8.isSelected()) 
            persistir=insertarDefectosDb(statement,10107,idPrueba);

        if (jCheckBox9.isSelected()) 
            persistir=insertarDefectosDb(statement,10108,idPrueba);
        
        if (jCheckBox10.isSelected()) 
            persistir=insertarDefectosDb(statement,10109,idPrueba);

        if (jCheckBox11.isSelected()) 
            persistir=insertarDefectosDb(statement,10110,idPrueba);

        if (jCheckBox12.isSelected()) 
            persistir=insertarDefectosDb(statement,10089,idPrueba);

        if (jCheckBox13.isSelected()) 
            persistir=insertarDefectosDb(statement,10090,idPrueba);

        if (jCheckBox14.isSelected())
            persistir=insertarDefectosDb(statement,10091,idPrueba);

        if (jCheckBox15.isSelected())
            persistir=insertarDefectosDb(statement,10092,idPrueba);

     //   if (jCheckBox16.isSelected()) 
         //   persistir=insertarDefectosDb(statement,10096,idPrueba); //lo pongo en comentario ya que si el check box esta visible entonces ahi inserta el defecto, si se desconetaria inserta dos veces el mismo defecto
                                                                       // y genera error 
  
        if (jCheckBox19.isSelected()) 
            persistir=insertarDefectosDb(statement,10093,idPrueba);

        if (jCheckBox20.isSelected()) 
            persistir=insertarDefectosDb(statement,10098,idPrueba);

        if (jCheckBox21.isSelected()) 
            persistir=insertarDefectosDb(statement,10099,idPrueba);

        if (jCheckBox22.isSelected()) 
            persistir=insertarDefectosDb(statement,10097,idPrueba);
        
        
        doClose(0);
        if (persistir == true) 
        {
            try {
                conexion.commit();
                conexion.setAutoCommit(true);
                conexion.close();
                JOptionPane.showMessageDialog(this, "Se ha REGISTRADO los Defectos (Motor) de una Manera Exitosa ", "SART 1.7.3", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                Logger.getLogger(Frm_Motorv2.class.getName()).log(Level.SEVERE, null, e);
                Mensajes.mostrarExcepcion(e);
            }
           
        }
        nrei.establecer_oprimido(true);
    }//GEN-LAST:event_guardarActionPerformed
    
    /**
     * 
     * @return 
     */
    private boolean validarValoresMedidas(double permisible)
    {
        System.out.println("---------------------------------------------------");
        System.out.println("--            validarValoresMedidas              --");
        System.out.println("---------------------------------------------------");
        boolean flag = true;
        try {
            List<Double> listMedidas = cargarMedidasLabradoDB(idPrueba);
            if (listMedidas.size() > 0) {
                for (int i = 0; i < listMedidas.size(); i++) {
                    if (listMedidas.get(i) < permisible) {
                        flag = false;
                    }
                    System.out.println(" valor de la medida " + i + " : " + listMedidas.get(i));
                }
            } else {
                flag = false;
            }
        } catch (Exception e) {
            System.out.println("Error en el metodo: validarValoresMedidas()" + e.getMessage() + e.getLocalizedMessage());
            Mensajes.mostrarExcepcion(e);
        }
        return flag;
    }

    //JFM-----------------------------------------------------------
    /**
     * Metodo para consultar las medidas de la llanta de repuesto y asi mismo en el formulario muestre el mensaje en caso de que se deba
     *insertar el defecto 
     *
     * @autor Felipe Martin
     * @param permsible
     * @param idPrueba
     * @return flag
     */
    private boolean validarMedidasLabradoRepuesto(double permisible, int idPrueba) {
        System.out.println("---------------------------------------------------");
        System.out.println("--      validarMedidasLabradoRepuesto            --");
        System.out.println("---------------------------------------------------");
        boolean flag = true;
        PreparedStatement ps;
        ResultSet rs;
        String sql;
        List<Double> listLabradoRepuesto = new ArrayList<Double>();
        sql = sql = "SELECT m.Valor_medida FROM medidas m WHERE m.MEASURETYPE IN (9040,9041,9042)AND m.TEST=?;";
        try {
            if (conexion != null) {
                ps = (PreparedStatement) conexion.prepareStatement(sql);
                ps.setInt(1, idPrueba);
                rs = ps.executeQuery();
                while (rs.next()) {
                    listLabradoRepuesto.add(rs.getDouble(1));
                }
            } else {
                JOptionPane.showMessageDialog(this, "Error de conexion con db", "Error", JOptionPane.ERROR_MESSAGE);
            }
            System.out.println("valor size de listLabradoRepuesto: " + listLabradoRepuesto.size());
            System.out.println("valor del permisible " + permisible);
            if (listLabradoRepuesto.size() == 0) {
                flag = false;
                return flag;
            } else {
                for (int i = 0; i < listLabradoRepuesto.size(); i++) {
                    if (listLabradoRepuesto.get(i) < permisible) {
                        flag = false;
                    }
                }
            }
            /* try 
        {
            List<Double> listMedidas= cargarMedidasLabradoDB(idPrueba);
           System.out.println("size de las medidas de labrado :" + listMedidas.size());
           if(listMedidas.size()== 4)
           {
               flag= true;
               return flag;
           }
            if (listMedidas.size() > 4) 
            {System.out.println("size de las medidas de labrado" + listMedidas.size());
                    for (int i =4 ; i < listMedidas.size() ; i++ ) 
                    { System.out.println(" entra al for, valor de i :" + listMedidas.get(i)+ "valor de i :" +i);
                        if (listMedidas.get(i) < permisible) 
                        {
                            flag = false;
                        }
                    } 
                }
           
        } */

        } catch (Exception e) {
            System.out.println("Error en el metodo: validarValoresMedidas()" + e.getMessage() + e.getLocalizedMessage());
            Mensajes.mostrarExcepcion(e);
        }
        return flag;
    }
    
   //JFM-----------------------------------------------------------
    /**
     * Metodo para colsultar las medidas de profundida de labrado 
     * por medio de los codigos internos
     * 
     * @autor ELKIN B
     * @param idPrueba
     * @return
     */
    public List cargarMedidasLabradoDB(int idPrueba)
    {
        System.out.println("---------------------------------------------------");
        System.out.println("--           cargarMedidasLabradoDB              --");
        System.out.println("---------------------------------------------------");
        PreparedStatement ps;
        ResultSet rs;
        String sql="";
        List<Double> listMedidas = new ArrayList<Double>();
        
        try 
        {
            List valor=UtilPropiedadesSart.cargarPropiedad("configuracion/ConfigMedidas.properties"); 
            if (valor.size()>0 ) 
            {
                System.out.println("valor de la lngitud de valor : "+ valor.size());
               // sql = "SELECT m.Valor_medida FROM medidas m WHERE m.MEASURETYPE IN ("+valor.get(0)+","+valor.get(1)+","+valor.get(2)+","+valor.get(3)+","+valor.get(4)+","+valor.get(5)+","+valor.get(6)+","+valor.get(7)+","+valor.get(8)+") AND m.TEST=?";
               sql = "SELECT m.Valor_medida FROM medidas m WHERE m.MEASURETYPE IN ("+valor.get(0)+","+valor.get(1)+","+valor.get(2)+","+valor.get(3)+","+valor.get(4)+","+valor.get(5)+","+valor.get(6)+","+valor.get(7)+","+valor.get(8)+","+valor.get(9)+","+valor.get(10)+","+valor.get(11)+","+valor.get(12)+","+valor.get(13)+","+valor.get(14)+","+valor.get(15)+","+valor.get(16)+","+valor.get(17)+","+valor.get(18)+","+valor.get(19)+","+valor.get(20)+") AND m.TEST=?";
               System.out.println(" sql que se ejecuta en cargarMedidasLabradoDB : " + sql);
                if (conexion != null) 
                {
                    ps = (PreparedStatement) conexion.prepareStatement(sql);
                    ps.setInt(1, idPrueba);
                    rs = ps.executeQuery();
                    while (rs.next())
                    {
                        listMedidas.add(rs.getDouble(1));
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Error de conexion con db", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) 
        {
            System.out.println("Error : " + e);
            System.out.println(e.getSQLState());
            System.out.println(e.getCause());
            System.out.println("Error en el metodo: cargarMedidasLabradoDB()" + e.getMessage() + e.getLocalizedMessage());
        } catch (IOException ex)
        {
            System.out.println("Error : " + ex);
            System.out.println(ex.getCause());
            System.out.println("Error en el metodo: cargarMedidasLabradoDB()" + ex.getMessage() + ex.getLocalizedMessage());
            Logger.getLogger(Frm_Motorv2.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listMedidas;
    }

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        doClose(returnStatus);
    }//GEN-LAST:event_cancelarActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jCheckBox21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox21ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox21ActionPerformed

    private void jCheckBox20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox20ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox20ActionPerformed

    private void jCheckBox23MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox23MousePressed
        selecionado23 = jCheckBox23.isSelected();
    }//GEN-LAST:event_jCheckBox23MousePressed

    private void jCheckBox24MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox24MousePressed
        selecionado24 = jCheckBox24.isSelected();
    }//GEN-LAST:event_jCheckBox24MousePressed

    private void jCheckBox23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox23ActionPerformed
        if (!selecionado23) 
        {
            if (validarValoresMedidas(permisibleLabrado)) 
            {
                jCheckBox23.setSelected(false);
                JOptionPane.showMessageDialog(this, "Las medidas registradas de labrado son correctas", "(Ojo)", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jCheckBox23ActionPerformed

    private void jCheckBox24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox24ActionPerformed
        if (!selecionado24) {
            if (validarValoresMedidas(permisibleLabrado)) {
                jCheckBox24.setSelected(false);
                JOptionPane.showMessageDialog(this, "Las medidas registradas de labrado son correctas", "(Ojo)", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jCheckBox24ActionPerformed
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /////////////////////////////////MÉTODOS SOBRE LA FUNCIONALIDAD //////////////////////////////
    public void establecerCantidadProblemas(int contadorA, int contadorB) {
        this.contadorA = contadorA;
        this.contadorB = contadorB;
    }

    public int obtenerCantidadProblemasA() {
        return contadorA;
    }

    public int obtenerCantidadProblemasB() {
        return contadorB;
    }

    public void establecerAprobado(int defecto) {
        if (defecto >= 100) {
            aprobado = false;
        }
        //TODO: Mirar si es un camion, una moto, un cuatriciclo, pq cada uno tiene un número máximo de rechazos
        //diferente, para carros normales es 10.
        if (defecto >= 10) {
            aprobado = false;
        }
    }

    public boolean obtenberAprobado() {
        return aprobado;
    }

    public void establecerNombreProblema(String cadenaRExterior) {
        this.cadenaRExterior += cadenaRExterior + "\n";
    }

    public String obtenerNombreProblema() {
        return cadenaRExterior;
    }

    public void establecerGrupo(String grupo) {
        this.grupo = grupo;
    }

    public String obtenerGrupo() {
        return grupo;
    }
    /////////////////////////////////////////////////////////////////////////////////////

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_Motorv2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
                Frm_Motorv2 dialog = new Frm_Motorv2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = 0;
}
